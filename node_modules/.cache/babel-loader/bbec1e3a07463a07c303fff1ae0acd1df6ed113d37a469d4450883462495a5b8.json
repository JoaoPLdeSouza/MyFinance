{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\Front\\\\myFinance\\\\src\\\\pages\\\\Planos.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Layout from \"../components/Layout\"; // Componente de layout para a estrutura geral da página\nimport { Chart } from \"react-google-charts\"; // Componente para renderizar gráficos do Google Charts\nimport authService from \"../services/authService\"; // Serviço para interagir com a API de autenticação e planos\nimport \"../assets/Planos.css\"; // Estilos CSS específicos para esta página\nimport VEcononoPopup from \"../components/VEcononoPopup\"; // Componente de popup para entrada de valor de economia\n\n/**\r\n * Componente funcional Planos\r\n * Esta página é responsável por exibir e gerenciar os planos financeiros do usuário,\r\n * incluindo visualização de ajustes recomendados e áreas de risco através de gráficos.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Planos = () => {\n  _s();\n  var _dadosPlano$ajustes, _dadosPlano$riscos;\n  // --- Estados do Componente ---\n  // dadosPlano: Armazena os detalhes do plano financeiro atualmente exibido.\n  const [dadosPlano, setDadosPlano] = useState(null);\n  // loading: Indica se uma operação assíncrona (carregamento/geração) está em andamento.\n  const [loading, setLoading] = useState(true);\n  // error: Armazena qualquer mensagem de erro que ocorra durante as operações.\n  const [error, setError] = useState(null);\n  // showValueInputPopup: Controla a visibilidade do popup para entrada de valor de economia.\n  const [showValueInputPopup, setShowValueInputPopup] = useState(false);\n  // todosOsPlanos: Armazena a lista dos últimos 3 planos financeiros do usuário, ordenados pelo ID (mais recente primeiro).\n  const [todosOsPlanos, setTodosOsPlanos] = useState([]);\n  // currentPlanIndex: O índice do plano atualmente visível no array todosOsPlanos.\n  // 0 representa o plano mais recente.\n  const [currentPlanIndex, setCurrentPlanIndex] = useState(0);\n\n  // --- Constantes e Mapeamentos ---\n  // categoriaCores: Mapeia categorias financeiras para cores específicas usadas nos gráficos.\n  const categoriaCores = {\n    NECESSIDADES: '#007bff',\n    // Azul\n    DESEJOS: '#dc3545',\n    // Vermelho\n    INVESTIMENTO_E_POUPANCA: '#28a745',\n    // Verde\n    ECONOMIA_PLANEJADA: '#8A2BE2' // Roxo\n  };\n\n  // formatarValor: Função auxiliar para formatar um número como valor monetário em BRL.\n  const formatarValor = valor => {\n    return valor.toLocaleString(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\"\n    });\n  };\n\n  // categoriaMapeada: Mapeia chaves de categoria (da API) para nomes mais amigáveis para exibição.\n  const categoriaMapeada = {\n    NECESSIDADES: \"Necessidades\",\n    DESEJOS: \"Desejos\",\n    INVESTIMENTO_E_POUPANCA: \"Investimento/Poupança\",\n    ECONOMIA_PLANEJADA: \"Economia Planejada\"\n  };\n\n  // --- Funções Auxiliares para Gráficos ---\n  /**\r\n   * preparaDadosParaGrafico: Transforma um array de dados de plano em um formato compatível com Google Charts.\r\n   * Agrupa valores por categoria e aplica cores predefinidas.\r\n   * @param {Array} dataArray - O array de dados (ajustes ou riscos) a ser processado.\r\n   * @param {string} titulo - O título da coluna de valor para o gráfico.\r\n   * @returns {Object} Um objeto contendo os dados formatados, cores e opções de série para o gráfico.\r\n   */\n  const prepararDadosParaGrafico = (dataArray, titulo) => {\n    // Agrupa os valores de cada item pela sua categoria.\n    const categoriasAgrupadas = dataArray.reduce((acc, item) => {\n      acc[item.categoria] = (acc[item.categoria] || 0) + item.valor;\n      return acc;\n    }, {});\n\n    // Inicializa o array de dados para o gráfico com os cabeçalhos das colunas.\n    const dados = [[\"Categoria\", titulo]];\n    // Array para armazenar as cores das fatias/barras do gráfico.\n    const coresOrdenadas = [];\n    // Objeto para configurar opções de série do gráfico (ex: cor por série).\n    const seriesOptions = {};\n\n    // Obtém as chaves das categorias em uma ordem definida para garantir consistência nas cores.\n    const orderedCategories = Object.keys(categoriaCores);\n    let seriesIndex = 0; // Índice para as séries dos gráficos.\n\n    // Itera sobre as categorias ordenadas para adicionar os dados e cores correspondentes.\n    orderedCategories.forEach(categoriaKey => {\n      if (categoriasAgrupadas.hasOwnProperty(categoriaKey)) {\n        dados.push([categoriaMapeada[categoriaKey], categoriasAgrupadas[categoriaKey]]);\n        coresOrdenadas.push(categoriaCores[categoriaKey]);\n        seriesOptions[seriesIndex] = {\n          color: categoriaCores[categoriaKey]\n        };\n        seriesIndex++;\n      }\n    });\n\n    // Adiciona quaisquer outras categorias que não estejam nas cores ordenadas com uma cor padrão.\n    for (const categoriaKey in categoriasAgrupadas) {\n      if (!orderedCategories.includes(categoriaKey)) {\n        dados.push([categoriaMapeada[categoriaKey] || categoriaKey, categoriasAgrupadas[categoriaKey]]);\n        coresOrdenadas.push('#cccccc'); // Cor padrão para categorias não mapeadas.\n        seriesOptions[seriesIndex] = {\n          color: '#cccccc'\n        };\n        seriesIndex++;\n      }\n    }\n    return {\n      data: dados,\n      colors: coresOrdenadas,\n      series: seriesOptions\n    };\n  };\n\n  // --- Funções de Interação com a API (memorizadas com useCallback) ---\n  /**\r\n   * carregarPlanosDoUsuario: Busca os planos financeiros de um usuário na API.\r\n   * Pega os 3 planos mais recentes (maior ID) e os define como estado.\r\n   */\n  const carregarPlanosDoUsuario = useCallback(async () => {\n    setLoading(true); // Ativa o estado de carregamento.\n    setError(null); // Limpa mensagens de erro anteriores.\n    try {\n      // Tenta recuperar os dados do usuário do localStorage.\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n\n      // Chama o serviço para buscar os planos do usuário.\n      const response = await authService.buscarPlanosPorUsuario(usuario.id);\n\n      // Verifica se a resposta contém dados e se é um array não vazio.\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        // Filtra os planos para garantir que pertencem ao usuário e os ordena por ID de forma decrescente (mais recente primeiro).\n        const planosDoUsuario = response.data.filter(plano => plano.idUsuario === usuario.id).sort((a, b) => b.id - a.id); // Ordena do ID mais alto (mais recente) para o mais baixo (mais antigo).\n\n        // Pega apenas os 3 planos com os IDs mais altos (os 3 mais recentes).\n        const ultimos3Planos = planosDoUsuario.slice(0, 3);\n        setTodosOsPlanos(ultimos3Planos); // Atualiza o estado com os 3 planos mais recentes.\n\n        // Se houver planos recentes, exibe o primeiro (o mais recente) e define o índice.\n        if (ultimos3Planos.length > 0) {\n          setDadosPlano(ultimos3Planos[0]); // Exibe o plano com o maior ID na página 1.\n          setCurrentPlanIndex(0); // O índice 0 corresponde ao plano mais recente.\n        } else {\n          // Se não houver planos, limpa os dados e redefine o índice.\n          setDadosPlano(null);\n          setCurrentPlanIndex(0);\n        }\n      } else {\n        // Se a API retornar sem dados de planos ou um array vazio.\n        setDadosPlano(null);\n        setTodosOsPlanos([]);\n        setCurrentPlanIndex(0);\n      }\n    } catch (err) {\n      // Captura e trata erros durante o carregamento dos planos.\n      console.error(\"Erro ao carregar os planos:\", err);\n      // Extrai a mensagem de erro da resposta da API ou usa uma mensagem genérica.\n      if (err.response && err.response.data && err.response.data.message) {\n        setError(`Erro ao carregar planos: ${err.response.data.message}`);\n      } else if (err.message) {\n        setError(err.message);\n      } else {\n        setError(\"Não foi possível carregar os planos financeiros. Verifique sua conexão.\");\n      }\n      setDadosPlano(null);\n      setTodosOsPlanos([]);\n    } finally {\n      setLoading(false); // Desativa o estado de carregamento.\n    }\n  }, []); // A função é memorizada e só recriada se carregarPlanosDoUsuario mudar (o que não acontecerá aqui).\n\n  /**\r\n   * gerarNovoPlano: Solicita à API a geração de um novo plano financeiro padrão para o usuário.\r\n   */\n  const gerarNovoPlano = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n\n      // Chama a API para gerar um novo plano padrão.\n      const response = await authService.gerarPlano(usuario.id);\n\n      // Se o plano foi gerado com sucesso (possui um ID), recarrega a lista de planos.\n      if (response.data && response.data.id) {\n        carregarPlanosDoUsuario();\n      } else {\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\n      }\n    } catch (err) {\n      console.error(\"Erro ao gerar novo plano padrão:\", err);\n      let errorMessage = \"Não foi possível gerar um novo plano financeiro. Tente novamente.\";\n      // Lógica para extrair mensagem de erro detalhada da resposta da API.\n      if (err.response) {\n        if (err.response.data && err.response.data.message) {\n          errorMessage = err.response.data.message;\n        } else if (err.response.data) {\n          errorMessage = JSON.stringify(err.response.data);\n        } else {\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      setError(errorMessage);\n      setDadosPlano(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [carregarPlanosDoUsuario]); // Depende de carregarPlanosDoUsuario para garantir que sempre use a versão mais recente.\n\n  /**\r\n   * gerarNovoPlanoComValor: Solicita à API a geração de um novo plano financeiro com um valor de economia mensal específico.\r\n   * @param {number} valor - O valor mensal que o usuário deseja economizar.\r\n   */\n  const gerarNovoPlanoComValor = useCallback(async valor => {\n    setLoading(true);\n    setError(null);\n    setShowValueInputPopup(false); // Fecha o popup após a submissão.\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n\n      // Chama a API para gerar um novo plano com o valor de economia especificado.\n      const response = await authService.gerarPlano(usuario.id, valor);\n\n      // Se o plano foi gerado com sucesso (possui um ID), recarrega a lista de planos.\n      if (response.data && response.data.id) {\n        carregarPlanosDoUsuario();\n      } else {\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\n      }\n    } catch (err) {\n      console.error(\"Erro ao gerar novo plano com valor:\", err);\n      let errorMessage = \"Ocorreu um erro ao gerar o plano com valor. Tente novamente.\";\n      // Lógica para extrair mensagem de erro detalhada da resposta da API.\n      if (err.response) {\n        if (err.response.data && err.response.data.message) {\n          errorMessage = err.response.data.message;\n        } else if (err.response.data) {\n          errorMessage = JSON.stringify(err.response.data);\n        } else {\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      setError(errorMessage);\n      setDadosPlano(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [carregarPlanosDoUsuario]); // Depende de carregarPlanosDoUsuario.\n\n  // --- Funções de Navegação entre Planos ---\n  /**\r\n   * handlePreviousPlan: Navega para o plano anterior na lista (que é um plano com ID mais antigo, pois a lista é decrescente por ID).\r\n   */\n  const handlePreviousPlan = () => {\n    // Calcula o próximo índice. Um incremento aqui significa ir para um plano com ID menor (mais antigo).\n    const newIndex = currentPlanIndex + 1;\n    // Verifica se o novo índice está dentro dos limites do array de planos.\n    if (newIndex < todosOsPlanos.length) {\n      setCurrentPlanIndex(newIndex); // Atualiza o índice do plano atual.\n      setDadosPlano(todosOsPlanos[newIndex]); // Define o plano correspondente ao novo índice.\n    }\n  };\n\n  /**\r\n   * handleNextPlan: Navega para o próximo plano na lista (que é um plano com ID mais recente, pois a lista é decrescente por ID).\r\n   */\n  const handleNextPlan = () => {\n    // Calcula o índice anterior. Um decremento aqui significa ir para um plano com ID maior (mais recente).\n    const newIndex = currentPlanIndex - 1;\n    // Verifica se o novo índice é válido (não menor que 0).\n    if (newIndex >= 0) {\n      setCurrentPlanIndex(newIndex); // Atualiza o índice do plano atual.\n      setDadosPlano(todosOsPlanos[newIndex]); // Define o plano correspondente ao novo índice.\n    }\n  };\n\n  // --- Efeito Colateral (useEffect) ---\n  // Este useEffect é executado uma vez após a montagem inicial do componente\n  // para carregar os planos do usuário.\n  useEffect(() => {\n    carregarPlanosDoUsuario();\n  }, [carregarPlanosDoUsuario]); // A dependência garante que a função seja chamada quando carregarPlanosDoUsuario for estável (graças ao useCallback).\n\n  // Verifica se há mais de um plano para habilitar/desabilitar os botões de navegação.\n  const hasMultiplePlans = todosOsPlanos.length > 1;\n\n  // --- Renderização do Componente ---\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planos-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"planos-header\",\n        children: \"Seu Plano Financeiro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"planos-description\",\n        children: \"Aqui voc\\xEA pode visualizar seu plano financeiro atual. Ele \\xE9 gerado com base nos seus lan\\xE7amentos e oferece recomenda\\xE7\\xF5es de ajustes e identifica \\xE1reas de risco em suas despesas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-actions-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-action-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"action-description\",\n            children: \"Gere um plano com base nos seus gastos atuais para identificar \\xE1reas de risco e oportunidades de ajuste, ajudando voc\\xEA a sair do vermelho e melhorar sua sa\\xFAde financeira geral.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"gerar-plano-button\",\n            onClick: gerarNovoPlano // Chama a função para gerar um plano sem valor de economia.\n            ,\n            disabled: loading // Desabilita o botão enquanto carrega.\n            ,\n            children: loading ? \"Gerando Plano...\" : \"Gerar Plano Padrão\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-action-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"action-description\",\n            children: \"Quer planejar sua economia mensal? Clique no bot\\xE3o abaixo e informe o valor que voc\\xEA deseja economizar por m\\xEAs. A ferramenta ir\\xE1 te ajudar a visualizar como alcan\\xE7ar essa meta!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"gerar-plano-button\",\n            onClick: () => setShowValueInputPopup(true) // Abre o popup de entrada de valor.\n            ,\n            disabled: loading // Desabilita o botão enquanto carrega.\n            ,\n            children: \"Gerar Plano com Valor de Economia Mensal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message loading-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Carregando plano financeiro...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), !loading && !error && dadosPlano && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Entenda seu plano:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this), \"Ajustes Recomendados: Representam oportunidades para otimizar seus gastos. Considere direcionar esses valores para suas economias ou investimentos, visando alcan\\xE7ar seus objetivos financeiros mais rapidamente.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this), \"\\xC1reas de Risco: Indicam despesas que foram identificadas como potencialmente altas. \\xC9 crucial revisar esses itens para identificar onde voc\\xEA pode economizar e evitar que eles comprometam sua sa\\xFAde financeira.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"disclaimer-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-disclaimer\",\n              children: \"Aviso:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 17\n            }, this), \" Esta ferramenta \\xE9 um aux\\xEDlio para seu planejamento financeiro e n\\xE3o substitui o aconselhamento de um profissional. As proje\\xE7\\xF5es s\\xE3o baseadas nos dados fornecidos e n\\xE3o garantem resultados futuros.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this), dadosPlano.ajustes && dadosPlano.ajustes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Ajustes Recomendados\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Estes s\\xE3o os valores e categorias onde voc\\xEA pode ajustar seus gastos para melhorar sua sa\\xFAde financeira. Ao reduzir esses gastos, voc\\xEA pode direcionar mais recursos para suas metas financeiras.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"planos-content-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Chart, {\n                chartType: \"PieChart\",\n                width: \"100%\",\n                height: \"100%\",\n                data: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").data,\n                options: {\n                  title: \"Distribuição dos Ajustes Recomendados\",\n                  pieHole: 0.4,\n                  // Cria um gráfico de donut.\n                  is3D: false,\n                  legend: {\n                    position: \"bottom\",\n                    alignment: \"center\"\n                  },\n                  tooltip: {\n                    trigger: 'focus'\n                  },\n                  // Exibe tooltip ao focar.\n                  backgroundColor: 'transparent',\n                  chartArea: {\n                    left: \"5%\",\n                    top: \"10%\",\n                    width: \"90%\",\n                    height: \"70%\"\n                  },\n                  colors: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").colors // Aplica as cores personalizadas.\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Detalhes dos Ajustes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: dadosPlano.ajustes.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [categoriaMapeada[item.categoria] || item.categoria, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 27\n                  }, this), \" \", item.subcategoria, \" - \", formatarValor(item.valor)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 15\n        }, this), dadosPlano.riscos && dadosPlano.riscos.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\xC1reas de Risco\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Estes gastos foram identificados como potencialmente altos. Recomendamos que voc\\xEA os revise para encontrar oportunidades de economia e evitar desequil\\xEDbrios em suas finan\\xE7as.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"planos-content-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Chart, {\n                chartType: \"BarChart\",\n                width: \"100%\",\n                height: \"100%\",\n                data: prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\").data,\n                options: {\n                  title: \"Valores por Categoria de Risco\",\n                  legend: {\n                    position: \"none\"\n                  },\n                  // Não exibe a legenda, pois as barras têm a mesma cor.\n                  bars: \"horizontal\",\n                  // Barras horizontais.\n                  hAxis: {\n                    format: \"currency\"\n                  },\n                  // Formata o eixo horizontal como moeda.\n                  tooltip: {\n                    trigger: 'focus'\n                  },\n                  backgroundColor: 'transparent',\n                  chartArea: {\n                    left: \"15%\",\n                    top: \"10%\",\n                    width: \"70%\",\n                    height: \"70%\"\n                  },\n                  colors: ['#dc3545'] // Mantém a cor vermelha para todos os riscos para destacar a categoria.\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Detalhes dos Riscos:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: dadosPlano.riscos.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [categoriaMapeada[item.categoria] || item.categoria, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 27\n                  }, this), \" \", item.subcategoria, \" - \", formatarValor(item.valor)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 15\n        }, this), !(dadosPlano !== null && dadosPlano !== void 0 && (_dadosPlano$ajustes = dadosPlano.ajustes) !== null && _dadosPlano$ajustes !== void 0 && _dadosPlano$ajustes.length) && !(dadosPlano !== null && dadosPlano !== void 0 && (_dadosPlano$riscos = dadosPlano.riscos) !== null && _dadosPlano$riscos !== void 0 && _dadosPlano$riscos.length) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-message no-data-found-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O plano foi gerado, mas n\\xE3o foram encontrados ajustes ou riscos para o seu perfil financeiro atual. Parece que suas finan\\xE7as est\\xE3o em ordem!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }, this), dadosPlano.dataAlteracao && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"data-alteracao\",\n          children: [\"\\xDAltima atualiza\\xE7\\xE3o do plano: \", dadosPlano.dataAlteracao]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 15\n        }, this), hasMultiplePlans && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-navigation-pills\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextPlan // decrementa currentPlanIndex, levando ao plano com ID maior (mais recente)\n            ,\n            disabled: currentPlanIndex === 0 || loading // Desabilita se for o plano mais recente ou estiver carregando\n            ,\n            className: `nav-pill-button ${currentPlanIndex === 0 ? 'disabled-pill' : ''}`,\n            children: \"Anterior\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"plan-index-display\",\n            children: [\"Plano \", currentPlanIndex + 1, \" de \", todosOsPlanos.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePreviousPlan // incrementa currentPlanIndex, levando ao plano com ID menor (mais antigo)\n            ,\n            disabled: currentPlanIndex === todosOsPlanos.length - 1 || loading // Desabilita se for o plano mais antigo ou estiver carregando\n            ,\n            className: `nav-pill-button ${currentPlanIndex === todosOsPlanos.length - 1 ? 'disabled-pill' : ''}`,\n            children: \"Proximo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), !loading && !error && !dadosPlano && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message initial-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Voc\\xEA ainda n\\xE3o possui um plano financeiro salvo ou ele est\\xE1 vazio.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), \"Clique em \\\"Gerar Novo Plano\\\" para analisar seus gastos e obter recomenda\\xE7\\xF5es personalizadas.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VEcononoPopup, {\n        isOpen: showValueInputPopup // Controla a visibilidade do popup.\n        ,\n        onClose: () => setShowValueInputPopup(false) // Função para fechar o popup.\n        ,\n        onSubmit: gerarNovoPlanoComValor // Função chamada ao submeter o valor de economia.\n        ,\n        isLoading: loading // Passa o estado de carregamento para o popup.\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(Planos, \"eEC7OlQW0357M/FAuh74sbOprJc=\");\n_c = Planos;\nexport default Planos; // Exporta o componente para ser usado em outras partes da aplicação.\nvar _c;\n$RefreshReg$(_c, \"Planos\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Layout","Chart","authService","VEcononoPopup","jsxDEV","_jsxDEV","Fragment","_Fragment","Planos","_s","_dadosPlano$ajustes","_dadosPlano$riscos","dadosPlano","setDadosPlano","loading","setLoading","error","setError","showValueInputPopup","setShowValueInputPopup","todosOsPlanos","setTodosOsPlanos","currentPlanIndex","setCurrentPlanIndex","categoriaCores","NECESSIDADES","DESEJOS","INVESTIMENTO_E_POUPANCA","ECONOMIA_PLANEJADA","formatarValor","valor","toLocaleString","style","currency","categoriaMapeada","prepararDadosParaGrafico","dataArray","titulo","categoriasAgrupadas","reduce","acc","item","categoria","dados","coresOrdenadas","seriesOptions","orderedCategories","Object","keys","seriesIndex","forEach","categoriaKey","hasOwnProperty","push","color","includes","data","colors","series","carregarPlanosDoUsuario","usuario","JSON","parse","localStorage","getItem","id","Error","response","buscarPlanosPorUsuario","Array","isArray","length","planosDoUsuario","filter","plano","idUsuario","sort","a","b","ultimos3Planos","slice","err","console","message","gerarNovoPlano","gerarPlano","errorMessage","stringify","status","statusText","gerarNovoPlanoComValor","handlePreviousPlan","newIndex","handleNextPlan","hasMultiplePlans","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ajustes","chartType","width","height","options","title","pieHole","is3D","legend","position","alignment","tooltip","trigger","backgroundColor","chartArea","left","top","map","index","subcategoria","riscos","bars","hAxis","format","dataAlteracao","isOpen","onClose","onSubmit","isLoading","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/pages/Planos.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport Layout from \"../components/Layout\"; // Componente de layout para a estrutura geral da página\r\nimport { Chart } from \"react-google-charts\"; // Componente para renderizar gráficos do Google Charts\r\nimport authService from \"../services/authService\"; // Serviço para interagir com a API de autenticação e planos\r\nimport \"../assets/Planos.css\"; // Estilos CSS específicos para esta página\r\nimport VEcononoPopup from \"../components/VEcononoPopup\"; // Componente de popup para entrada de valor de economia\r\n\r\n/**\r\n * Componente funcional Planos\r\n * Esta página é responsável por exibir e gerenciar os planos financeiros do usuário,\r\n * incluindo visualização de ajustes recomendados e áreas de risco através de gráficos.\r\n */\r\nconst Planos = () => {\r\n  // --- Estados do Componente ---\r\n  // dadosPlano: Armazena os detalhes do plano financeiro atualmente exibido.\r\n  const [dadosPlano, setDadosPlano] = useState(null);\r\n  // loading: Indica se uma operação assíncrona (carregamento/geração) está em andamento.\r\n  const [loading, setLoading] = useState(true);\r\n  // error: Armazena qualquer mensagem de erro que ocorra durante as operações.\r\n  const [error, setError] = useState(null);\r\n  // showValueInputPopup: Controla a visibilidade do popup para entrada de valor de economia.\r\n  const [showValueInputPopup, setShowValueInputPopup] = useState(false);\r\n  // todosOsPlanos: Armazena a lista dos últimos 3 planos financeiros do usuário, ordenados pelo ID (mais recente primeiro).\r\n  const [todosOsPlanos, setTodosOsPlanos] = useState([]);\r\n  // currentPlanIndex: O índice do plano atualmente visível no array todosOsPlanos.\r\n  // 0 representa o plano mais recente.\r\n  const [currentPlanIndex, setCurrentPlanIndex] = useState(0);\r\n\r\n  // --- Constantes e Mapeamentos ---\r\n  // categoriaCores: Mapeia categorias financeiras para cores específicas usadas nos gráficos.\r\n  const categoriaCores = {\r\n    NECESSIDADES: '#007bff', // Azul\r\n    DESEJOS: '#dc3545', // Vermelho\r\n    INVESTIMENTO_E_POUPANCA: '#28a745', // Verde\r\n    ECONOMIA_PLANEJADA: '#8A2BE2' // Roxo\r\n  };\r\n\r\n  // formatarValor: Função auxiliar para formatar um número como valor monetário em BRL.\r\n  const formatarValor = (valor) => {\r\n    return valor.toLocaleString(\"pt-BR\", { style: \"currency\", currency: \"BRL\" });\r\n  };\r\n\r\n  // categoriaMapeada: Mapeia chaves de categoria (da API) para nomes mais amigáveis para exibição.\r\n  const categoriaMapeada = {\r\n    NECESSIDADES: \"Necessidades\",\r\n    DESEJOS: \"Desejos\",\r\n    INVESTIMENTO_E_POUPANCA: \"Investimento/Poupança\",\r\n    ECONOMIA_PLANEJADA: \"Economia Planejada\"\r\n  };\r\n\r\n  // --- Funções Auxiliares para Gráficos ---\r\n  /**\r\n   * preparaDadosParaGrafico: Transforma um array de dados de plano em um formato compatível com Google Charts.\r\n   * Agrupa valores por categoria e aplica cores predefinidas.\r\n   * @param {Array} dataArray - O array de dados (ajustes ou riscos) a ser processado.\r\n   * @param {string} titulo - O título da coluna de valor para o gráfico.\r\n   * @returns {Object} Um objeto contendo os dados formatados, cores e opções de série para o gráfico.\r\n   */\r\n  const prepararDadosParaGrafico = (dataArray, titulo) => {\r\n    // Agrupa os valores de cada item pela sua categoria.\r\n    const categoriasAgrupadas = dataArray.reduce((acc, item) => {\r\n      acc[item.categoria] = (acc[item.categoria] || 0) + item.valor;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Inicializa o array de dados para o gráfico com os cabeçalhos das colunas.\r\n    const dados = [[\"Categoria\", titulo]];\r\n    // Array para armazenar as cores das fatias/barras do gráfico.\r\n    const coresOrdenadas = [];\r\n    // Objeto para configurar opções de série do gráfico (ex: cor por série).\r\n    const seriesOptions = {};\r\n\r\n    // Obtém as chaves das categorias em uma ordem definida para garantir consistência nas cores.\r\n    const orderedCategories = Object.keys(categoriaCores);\r\n    let seriesIndex = 0; // Índice para as séries dos gráficos.\r\n\r\n    // Itera sobre as categorias ordenadas para adicionar os dados e cores correspondentes.\r\n    orderedCategories.forEach(categoriaKey => {\r\n      if (categoriasAgrupadas.hasOwnProperty(categoriaKey)) {\r\n        dados.push([categoriaMapeada[categoriaKey], categoriasAgrupadas[categoriaKey]]);\r\n        coresOrdenadas.push(categoriaCores[categoriaKey]);\r\n        seriesOptions[seriesIndex] = { color: categoriaCores[categoriaKey] };\r\n        seriesIndex++;\r\n      }\r\n    });\r\n\r\n    // Adiciona quaisquer outras categorias que não estejam nas cores ordenadas com uma cor padrão.\r\n    for (const categoriaKey in categoriasAgrupadas) {\r\n      if (!orderedCategories.includes(categoriaKey)) {\r\n        dados.push([categoriaMapeada[categoriaKey] || categoriaKey, categoriasAgrupadas[categoriaKey]]);\r\n        coresOrdenadas.push('#cccccc'); // Cor padrão para categorias não mapeadas.\r\n        seriesOptions[seriesIndex] = { color: '#cccccc' };\r\n        seriesIndex++;\r\n      }\r\n    }\r\n\r\n    return { data: dados, colors: coresOrdenadas, series: seriesOptions };\r\n  };\r\n\r\n  // --- Funções de Interação com a API (memorizadas com useCallback) ---\r\n  /**\r\n   * carregarPlanosDoUsuario: Busca os planos financeiros de um usuário na API.\r\n   * Pega os 3 planos mais recentes (maior ID) e os define como estado.\r\n   */\r\n  const carregarPlanosDoUsuario = useCallback(async () => {\r\n    setLoading(true); // Ativa o estado de carregamento.\r\n    setError(null); // Limpa mensagens de erro anteriores.\r\n    try {\r\n      // Tenta recuperar os dados do usuário do localStorage.\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      // Chama o serviço para buscar os planos do usuário.\r\n      const response = await authService.buscarPlanosPorUsuario(usuario.id);\r\n\r\n      // Verifica se a resposta contém dados e se é um array não vazio.\r\n      if (Array.isArray(response.data) && response.data.length > 0) {\r\n        // Filtra os planos para garantir que pertencem ao usuário e os ordena por ID de forma decrescente (mais recente primeiro).\r\n        const planosDoUsuario = response.data\r\n          .filter((plano) => plano.idUsuario === usuario.id)\r\n          .sort((a, b) => b.id - a.id); // Ordena do ID mais alto (mais recente) para o mais baixo (mais antigo).\r\n\r\n        // Pega apenas os 3 planos com os IDs mais altos (os 3 mais recentes).\r\n        const ultimos3Planos = planosDoUsuario.slice(0, 3);\r\n        setTodosOsPlanos(ultimos3Planos); // Atualiza o estado com os 3 planos mais recentes.\r\n\r\n        // Se houver planos recentes, exibe o primeiro (o mais recente) e define o índice.\r\n        if (ultimos3Planos.length > 0) {\r\n          setDadosPlano(ultimos3Planos[0]); // Exibe o plano com o maior ID na página 1.\r\n          setCurrentPlanIndex(0); // O índice 0 corresponde ao plano mais recente.\r\n        } else {\r\n          // Se não houver planos, limpa os dados e redefine o índice.\r\n          setDadosPlano(null);\r\n          setCurrentPlanIndex(0);\r\n        }\r\n      } else {\r\n        // Se a API retornar sem dados de planos ou um array vazio.\r\n        setDadosPlano(null);\r\n        setTodosOsPlanos([]);\r\n        setCurrentPlanIndex(0);\r\n      }\r\n    } catch (err) {\r\n      // Captura e trata erros durante o carregamento dos planos.\r\n      console.error(\"Erro ao carregar os planos:\", err);\r\n      // Extrai a mensagem de erro da resposta da API ou usa uma mensagem genérica.\r\n      if (err.response && err.response.data && err.response.data.message) {\r\n        setError(`Erro ao carregar planos: ${err.response.data.message}`);\r\n      } else if (err.message) {\r\n        setError(err.message);\r\n      } else {\r\n        setError(\"Não foi possível carregar os planos financeiros. Verifique sua conexão.\");\r\n      }\r\n      setDadosPlano(null);\r\n      setTodosOsPlanos([]);\r\n    } finally {\r\n      setLoading(false); // Desativa o estado de carregamento.\r\n    }\r\n  }, []); // A função é memorizada e só recriada se carregarPlanosDoUsuario mudar (o que não acontecerá aqui).\r\n\r\n  /**\r\n   * gerarNovoPlano: Solicita à API a geração de um novo plano financeiro padrão para o usuário.\r\n   */\r\n  const gerarNovoPlano = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      // Chama a API para gerar um novo plano padrão.\r\n      const response = await authService.gerarPlano(usuario.id);\r\n\r\n      // Se o plano foi gerado com sucesso (possui um ID), recarrega a lista de planos.\r\n      if (response.data && response.data.id) {\r\n        carregarPlanosDoUsuario();\r\n      } else {\r\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao gerar novo plano padrão:\", err);\r\n      let errorMessage = \"Não foi possível gerar um novo plano financeiro. Tente novamente.\";\r\n      // Lógica para extrair mensagem de erro detalhada da resposta da API.\r\n      if (err.response) {\r\n        if (err.response.data && err.response.data.message) {\r\n          errorMessage = err.response.data.message;\r\n        } else if (err.response.data) {\r\n          errorMessage = JSON.stringify(err.response.data);\r\n        } else {\r\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\r\n        }\r\n      } else if (err.message) {\r\n        errorMessage = err.message;\r\n      }\r\n      setError(errorMessage);\r\n      setDadosPlano(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [carregarPlanosDoUsuario]); // Depende de carregarPlanosDoUsuario para garantir que sempre use a versão mais recente.\r\n\r\n  /**\r\n   * gerarNovoPlanoComValor: Solicita à API a geração de um novo plano financeiro com um valor de economia mensal específico.\r\n   * @param {number} valor - O valor mensal que o usuário deseja economizar.\r\n   */\r\n  const gerarNovoPlanoComValor = useCallback(async (valor) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setShowValueInputPopup(false); // Fecha o popup após a submissão.\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      // Chama a API para gerar um novo plano com o valor de economia especificado.\r\n      const response = await authService.gerarPlano(usuario.id, valor);\r\n\r\n      // Se o plano foi gerado com sucesso (possui um ID), recarrega a lista de planos.\r\n      if (response.data && response.data.id) {\r\n        carregarPlanosDoUsuario();\r\n      } else {\r\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao gerar novo plano com valor:\", err);\r\n      let errorMessage = \"Ocorreu um erro ao gerar o plano com valor. Tente novamente.\";\r\n      // Lógica para extrair mensagem de erro detalhada da resposta da API.\r\n      if (err.response) {\r\n        if (err.response.data && err.response.data.message) {\r\n          errorMessage = err.response.data.message;\r\n        } else if (err.response.data) {\r\n          errorMessage = JSON.stringify(err.response.data);\r\n        } else {\r\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\r\n        }\r\n      } else if (err.message) {\r\n        errorMessage = err.message;\r\n      }\r\n      setError(errorMessage);\r\n      setDadosPlano(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [carregarPlanosDoUsuario]); // Depende de carregarPlanosDoUsuario.\r\n\r\n  // --- Funções de Navegação entre Planos ---\r\n  /**\r\n   * handlePreviousPlan: Navega para o plano anterior na lista (que é um plano com ID mais antigo, pois a lista é decrescente por ID).\r\n   */\r\n  const handlePreviousPlan = () => {\r\n    // Calcula o próximo índice. Um incremento aqui significa ir para um plano com ID menor (mais antigo).\r\n    const newIndex = currentPlanIndex + 1;\r\n    // Verifica se o novo índice está dentro dos limites do array de planos.\r\n    if (newIndex < todosOsPlanos.length) {\r\n      setCurrentPlanIndex(newIndex); // Atualiza o índice do plano atual.\r\n      setDadosPlano(todosOsPlanos[newIndex]); // Define o plano correspondente ao novo índice.\r\n    }\r\n  };\r\n\r\n  /**\r\n   * handleNextPlan: Navega para o próximo plano na lista (que é um plano com ID mais recente, pois a lista é decrescente por ID).\r\n   */\r\n  const handleNextPlan = () => {\r\n    // Calcula o índice anterior. Um decremento aqui significa ir para um plano com ID maior (mais recente).\r\n    const newIndex = currentPlanIndex - 1;\r\n    // Verifica se o novo índice é válido (não menor que 0).\r\n    if (newIndex >= 0) {\r\n      setCurrentPlanIndex(newIndex); // Atualiza o índice do plano atual.\r\n      setDadosPlano(todosOsPlanos[newIndex]); // Define o plano correspondente ao novo índice.\r\n    }\r\n  };\r\n\r\n  // --- Efeito Colateral (useEffect) ---\r\n  // Este useEffect é executado uma vez após a montagem inicial do componente\r\n  // para carregar os planos do usuário.\r\n  useEffect(() => {\r\n    carregarPlanosDoUsuario();\r\n  }, [carregarPlanosDoUsuario]); // A dependência garante que a função seja chamada quando carregarPlanosDoUsuario for estável (graças ao useCallback).\r\n\r\n  // Verifica se há mais de um plano para habilitar/desabilitar os botões de navegação.\r\n  const hasMultiplePlans = todosOsPlanos.length > 1;\r\n\r\n  // --- Renderização do Componente ---\r\n  return (\r\n    <Layout>\r\n      <div className=\"planos-container\">\r\n        <h1 className=\"planos-header\">Seu Plano Financeiro</h1>\r\n        <p className=\"planos-description\">\r\n          Aqui você pode visualizar seu plano financeiro atual. Ele é gerado com base nos seus lançamentos\r\n          e oferece recomendações de ajustes e identifica áreas de risco em suas despesas.\r\n        </p>\r\n\r\n        {/* Grupo de botões para ações de geração de plano */}\r\n        <div className=\"planos-actions-group\">\r\n          {/* Card para gerar plano padrão */}\r\n          <div className=\"plan-action-card\">\r\n            <p className=\"action-description\">\r\n              Gere um plano com base nos seus gastos atuais para identificar áreas de risco e oportunidades de ajuste,\r\n              ajudando você a sair do vermelho e melhorar sua saúde financeira geral.\r\n            </p>\r\n            <button\r\n              className=\"gerar-plano-button\"\r\n              onClick={gerarNovoPlano} // Chama a função para gerar um plano sem valor de economia.\r\n              disabled={loading} // Desabilita o botão enquanto carrega.\r\n            >\r\n              {loading ? \"Gerando Plano...\" : \"Gerar Plano Padrão\"}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Card para gerar plano com valor de economia mensal */}\r\n          <div className=\"plan-action-card\">\r\n            <p className=\"action-description\">\r\n              Quer planejar sua economia mensal? Clique no botão abaixo e informe\r\n              o valor que você deseja economizar por mês. A ferramenta irá te ajudar a visualizar\r\n              como alcançar essa meta!\r\n            </p>\r\n            <button\r\n              className=\"gerar-plano-button\"\r\n              onClick={() => setShowValueInputPopup(true)} // Abre o popup de entrada de valor.\r\n              disabled={loading} // Desabilita o botão enquanto carrega.\r\n            >\r\n              Gerar Plano com Valor de Economia Mensal\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mensagens de status (carregamento, erro) */}\r\n        {loading && (\r\n          <div className=\"planos-message loading-message\">\r\n            <p>Carregando plano financeiro...</p>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <div className=\"planos-message error-message\">\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Renderiza o conteúdo do plano financeiro se não estiver carregando, sem erros e dadosPlano existir */}\r\n        {!loading && !error && dadosPlano && (\r\n          <>\r\n            {/* Seção de resumo e avisos sobre o plano */}\r\n            <div className=\"planos-summary\">\r\n              <p>\r\n                Entenda seu plano:\r\n                <br></br>\r\n                <br />\r\n                Ajustes Recomendados: Representam oportunidades para otimizar seus gastos.\r\n                Considere direcionar esses valores para suas economias ou investimentos,\r\n                visando alcançar seus objetivos financeiros mais rapidamente.\r\n                <br></br>\r\n                <br />\r\n                Áreas de Risco: Indicam despesas que foram identificadas como potencialmente altas.\r\n                É crucial revisar esses itens para identificar onde você pode economizar\r\n                e evitar que eles comprometam sua saúde financeira.\r\n              </p>\r\n              <p className=\"disclaimer-text\">\r\n                <span className=\"bold-disclaimer\">Aviso:</span> Esta ferramenta é um auxílio para seu planejamento financeiro e não\r\n                substitui o aconselhamento de um profissional. As projeções são baseadas nos dados fornecidos\r\n                e não garantem resultados futuros.\r\n              </p>\r\n            </div>\r\n\r\n            {/* Seção de Ajustes Recomendados (renderiza apenas se houver dados de ajustes) */}\r\n            {dadosPlano.ajustes && dadosPlano.ajustes.length > 0 && (\r\n              <div className=\"planos-section\">\r\n                <h2>Ajustes Recomendados</h2>\r\n                <p>\r\n                  Estes são os valores e categorias onde você pode ajustar seus gastos para melhorar sua saúde financeira.\r\n                  Ao reduzir esses gastos, você pode direcionar mais recursos para suas metas financeiras.\r\n                </p>\r\n                <div className=\"planos-content-grid\">\r\n                  <div className=\"chart-wrapper\">\r\n                    {/* Gráfico de Pizza para Ajustes Recomendados */}\r\n                    <Chart\r\n                      chartType=\"PieChart\"\r\n                      width=\"100%\"\r\n                      height=\"100%\"\r\n                      data={prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").data}\r\n                      options={{\r\n                        title: \"Distribuição dos Ajustes Recomendados\",\r\n                        pieHole: 0.4, // Cria um gráfico de donut.\r\n                        is3D: false,\r\n                        legend: { position: \"bottom\", alignment: \"center\" },\r\n                        tooltip: { trigger: 'focus' }, // Exibe tooltip ao focar.\r\n                        backgroundColor: 'transparent',\r\n                        chartArea: { left: \"5%\", top: \"10%\", width: \"90%\", height: \"70%\" },\r\n                        colors: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").colors // Aplica as cores personalizadas.\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  {/* Lista detalhada dos ajustes */}\r\n                  <div className=\"list-wrapper\">\r\n                    <h3>Detalhes dos Ajustes:</h3>\r\n                    <ul>\r\n                      {dadosPlano.ajustes.map((item, index) => (\r\n                        <li key={index}>\r\n                          <strong>{categoriaMapeada[item.categoria] || item.categoria}:</strong> {item.subcategoria} - {formatarValor(item.valor)}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Seção de Áreas de Risco (renderiza apenas se houver dados de riscos) */}\r\n            {dadosPlano.riscos && dadosPlano.riscos.length > 0 && (\r\n              <div className=\"planos-section\">\r\n                <h2>Áreas de Risco</h2>\r\n                <p>\r\n                  Estes gastos foram identificados como potencialmente altos. Recomendamos que\r\n                  você os revise para encontrar oportunidades de economia e evitar desequilíbrios em suas finanças.\r\n                </p>\r\n                <div className=\"planos-content-grid\">\r\n                  <div className=\"chart-wrapper\">\r\n                    {/* Gráfico de Barras para Áreas de Risco */}\r\n                    <Chart\r\n                      chartType=\"BarChart\"\r\n                      width=\"100%\"\r\n                      height=\"100%\"\r\n                      data={prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\").data}\r\n                      options={{\r\n                        title: \"Valores por Categoria de Risco\",\r\n                        legend: { position: \"none\" }, // Não exibe a legenda, pois as barras têm a mesma cor.\r\n                        bars: \"horizontal\", // Barras horizontais.\r\n                        hAxis: { format: \"currency\" }, // Formata o eixo horizontal como moeda.\r\n                        tooltip: { trigger: 'focus' },\r\n                        backgroundColor: 'transparent',\r\n                        chartArea: { left: \"15%\", top: \"10%\", width: \"70%\", height: \"70%\" },\r\n                        colors: ['#dc3545'] // Mantém a cor vermelha para todos os riscos para destacar a categoria.\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  {/* Lista detalhada dos riscos */}\r\n                  <div className=\"list-wrapper\">\r\n                    <h3>Detalhes dos Riscos:</h3>\r\n                    <ul>\r\n                      {dadosPlano.riscos.map((item, index) => (\r\n                        <li key={index}>\r\n                          <strong>{categoriaMapeada[item.categoria] || item.categoria}:</strong> {item.subcategoria} - {formatarValor(item.valor)}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Mensagem exibida se não houver ajustes ou riscos no plano atual */}\r\n            {!dadosPlano?.ajustes?.length && !dadosPlano?.riscos?.length && (\r\n              <div className=\"planos-message no-data-found-message\">\r\n                <p>O plano foi gerado, mas não foram encontrados ajustes ou riscos para o seu perfil financeiro atual. Parece que suas finanças estão em ordem!</p>\r\n              </div>\r\n            )}\r\n\r\n            {/* Exibe a data da última alteração do plano */}\r\n            {dadosPlano.dataAlteracao && (\r\n              <p className=\"data-alteracao\">\r\n                Última atualização do plano: {dadosPlano.dataAlteracao}\r\n              </p>\r\n            )}\r\n\r\n            {/* Componentes de navegação entre os planos (visíveis apenas se houver mais de um plano) */}\r\n            {hasMultiplePlans && (\r\n              <div className=\"plan-navigation-pills\">\r\n                {/* Botão \"Anterior\" (que na verdade navega para o plano com ID mais recente) */}\r\n                <button\r\n                  onClick={handleNextPlan} // decrementa currentPlanIndex, levando ao plano com ID maior (mais recente)\r\n                  disabled={currentPlanIndex === 0 || loading} // Desabilita se for o plano mais recente ou estiver carregando\r\n                  className={`nav-pill-button ${currentPlanIndex === 0 ? 'disabled-pill' : ''}`}\r\n                >\r\n                  Anterior\r\n                </button>\r\n                {/* Exibe o índice atual do plano */}\r\n                <span className=\"plan-index-display\">\r\n                  Plano {currentPlanIndex + 1} de {todosOsPlanos.length}\r\n                </span>\r\n                {/* Botão \"Proximo\" (que na verdade navega para o plano com ID mais antigo) */}\r\n                <button\r\n                  onClick={handlePreviousPlan} // incrementa currentPlanIndex, levando ao plano com ID menor (mais antigo)\r\n                  disabled={currentPlanIndex === todosOsPlanos.length - 1 || loading} // Desabilita se for o plano mais antigo ou estiver carregando\r\n                  className={`nav-pill-button ${currentPlanIndex === todosOsPlanos.length - 1 ? 'disabled-pill' : ''}`}\r\n                >\r\n                  Proximo\r\n                </button>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {/* Mensagem inicial exibida quando não há planos carregados */}\r\n        {!loading && !error && !dadosPlano && (\r\n          <div className=\"planos-message initial-message\">\r\n            <p>\r\n              Você ainda não possui um plano financeiro salvo ou ele está vazio.\r\n              <br />\r\n              Clique em \"Gerar Novo Plano\" para analisar seus gastos e obter recomendações personalizadas.\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Componente Popup para entrada de valor de economia */}\r\n        <VEcononoPopup\r\n          isOpen={showValueInputPopup} // Controla a visibilidade do popup.\r\n          onClose={() => setShowValueInputPopup(false)} // Função para fechar o popup.\r\n          onSubmit={gerarNovoPlanoComValor} // Função chamada ao submeter o valor de economia.\r\n          isLoading={loading} // Passa o estado de carregamento para o popup.\r\n        />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Planos; // Exporta o componente para ser usado em outras partes da aplicação."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}