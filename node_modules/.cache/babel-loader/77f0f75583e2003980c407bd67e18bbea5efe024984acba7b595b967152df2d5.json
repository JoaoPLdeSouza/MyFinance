{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\Front\\\\myFinance\\\\src\\\\components\\\\VEcononoPopup.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../assets/Popup.css'; // Certifique-se de que este CSS existe e está correto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VEcononoPopup = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  isLoading\n}) => {\n  _s();\n  const [value, setValue] = useState('0,00'); // Estado para o valor do input, inicializado com \"0,00\"\n  const [message, setMessage] = useState(''); // Mensagem de erro/validação interna do popup\n  const [erroValor, setErroValor] = useState(''); // Novo estado para a mensagem de erro do valor\n\n  // Efeito para limpar a mensagem de validação interna do popup e o valor quando ele é aberto ou fechado\n  useEffect(() => {\n    if (isOpen) {\n      setMessage(''); // Limpa a mensagem ao abrir o popup\n      setErroValor(''); // Limpa a mensagem de erro do valor\n      setValue('0,00'); // Limpa o input\n    }\n  }, [isOpen]);\n\n  // Se o popup não estiver aberto, não renderiza nada\n  if (!isOpen) return null;\n  const handleValorChange = e => {\n    let raw = e.target.value.replace(/\\D/g, \"\"); // Remove tudo que não for dígito\n    if (raw === \"\") raw = \"000\"; // Garante pelo menos \"000\" para evitar erros de slice\n    while (raw.length < 3) {\n      raw = \"0\" + raw; // Adiciona zeros à esquerda até ter pelo menos 3 dígitos\n    }\n    const inteiro = raw.slice(0, -2); // Separa a parte inteira\n    const decimal = raw.slice(-2); // Separa os centavos\n    const formatado = `${parseInt(inteiro, 10)},${decimal}`; // Formata como \"X,YY\"\n    setValue(formatado);\n    setErroValor(\"\"); // Limpa o erro ao digitar\n  };\n\n  // Lida com a submissão do formulário no popup\n  const handleSubmit = e => {\n    e.preventDefault(); // Previne o comportamento padrão de recarregar a página\n\n    const numericValue = parseFloat(value.replace(\",\", \".\")); // Converte o valor do input para número, trocando a vírgula por ponto\n\n    // Validação básica no front-end: verifica se é um número válido e positivo\n    if (isNaN(numericValue) || numericValue <= 0) {\n      setErroValor('Por favor, insira um valor numérico válido (maior que 0,00).');\n      return; // Interrompe a submissão se a validação falhar\n    }\n\n    // Se a validação passar, chama a função onSubmit passada como prop\n    onSubmit(numericValue);\n  };\n\n  // Lida com o fechamento do popup (botão Cancelar ou clique fora)\n  const handleClose = () => {\n    setMessage(''); // Limpa a mensagem de validação\n    setErroValor(''); // Limpa a mensagem de erro do valor\n    setValue('0,00'); // Limpa o input\n    onClose(); // Chama a função onClose passada como prop para fechar o popup\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Gerar Novo Plano com Valor para Economia Mensal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"popup-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bold-popup-text\",\n          children: \"Explica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), \" Este valor representa a quantia que voc\\xEA deseja economizar mensalmente. Ao inseri-lo, o sistema tentar\\xE1 ajustar as recomenda\\xE7\\xF5es do seu plano para te ajudar a alcan\\xE7ar essa meta de economia, realocando despesas ou sugerindo onde cortar gastos para liberar esse valor.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\" // Alterado para 'text'\n          ,\n          inputMode: \"numeric\" // Habilita teclado numérico em dispositivos móveis\n          ,\n          step: \"0.01\" // Permite valores com duas casas decimais (embora a formatação manual já cuide disso)\n          ,\n          placeholder: \"Valor para economizar por m\\xEAs (Ex: 100,00)\",\n          value: value,\n          onChange: handleValorChange // Usa a nova função de formatação\n          ,\n          onKeyDown: e => {\n            // Impede setas de mover o cursor\n            const invalidKeys = [\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\"];\n            if (invalidKeys.includes(e.key)) {\n              e.preventDefault();\n            }\n          },\n          onClick: e => e.preventDefault() // Impede seleção ao clicar\n          ,\n          onSelect: e => {\n            // Mantém o cursor no final\n            const len = e.target.value.length;\n            setTimeout(() => e.target.setSelectionRange(len, len), 0);\n          },\n          onPaste: e => e.preventDefault() // Impede colar\n          ,\n          disabled: isLoading // Desabilita o input enquanto está carregando\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"popup-message error-message\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }, this), erroValor && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"popup-message error-message\",\n          children: erroValor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          children: [isLoading ? 'Gerando...' : 'Gerar Plano', \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleClose,\n          disabled: isLoading,\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(VEcononoPopup, \"hvZSiMLZyWD8j5uyKZxz0z2vlyo=\");\n_c = VEcononoPopup;\nexport default VEcononoPopup;\nvar _c;\n$RefreshReg$(_c, \"VEcononoPopup\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","VEcononoPopup","isOpen","onClose","onSubmit","isLoading","_s","value","setValue","message","setMessage","erroValor","setErroValor","handleValorChange","e","raw","target","replace","length","inteiro","slice","decimal","formatado","parseInt","handleSubmit","preventDefault","numericValue","parseFloat","isNaN","handleClose","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","inputMode","step","placeholder","onChange","onKeyDown","invalidKeys","includes","key","onClick","onSelect","len","setTimeout","setSelectionRange","onPaste","disabled","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/components/VEcononoPopup.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../assets/Popup.css'; // Certifique-se de que este CSS existe e está correto\r\n\r\nconst VEcononoPopup = ({ isOpen, onClose, onSubmit, isLoading }) => {\r\n  const [value, setValue] = useState('0,00'); // Estado para o valor do input, inicializado com \"0,00\"\r\n  const [message, setMessage] = useState(''); // Mensagem de erro/validação interna do popup\r\n  const [erroValor, setErroValor] = useState(''); // Novo estado para a mensagem de erro do valor\r\n\r\n  // Efeito para limpar a mensagem de validação interna do popup e o valor quando ele é aberto ou fechado\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setMessage(''); // Limpa a mensagem ao abrir o popup\r\n      setErroValor(''); // Limpa a mensagem de erro do valor\r\n      setValue('0,00'); // Limpa o input\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Se o popup não estiver aberto, não renderiza nada\r\n  if (!isOpen) return null;\r\n\r\n  const handleValorChange = (e) => {\r\n    let raw = e.target.value.replace(/\\D/g, \"\"); // Remove tudo que não for dígito\r\n    if (raw === \"\") raw = \"000\"; // Garante pelo menos \"000\" para evitar erros de slice\r\n    while (raw.length < 3) {\r\n      raw = \"0\" + raw; // Adiciona zeros à esquerda até ter pelo menos 3 dígitos\r\n    }\r\n    const inteiro = raw.slice(0, -2); // Separa a parte inteira\r\n    const decimal = raw.slice(-2); // Separa os centavos\r\n    const formatado = `${parseInt(inteiro, 10)},${decimal}`; // Formata como \"X,YY\"\r\n    setValue(formatado);\r\n    setErroValor(\"\"); // Limpa o erro ao digitar\r\n  };\r\n\r\n  // Lida com a submissão do formulário no popup\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Previne o comportamento padrão de recarregar a página\r\n\r\n    const numericValue = parseFloat(value.replace(\",\", \".\")); // Converte o valor do input para número, trocando a vírgula por ponto\r\n\r\n    // Validação básica no front-end: verifica se é um número válido e positivo\r\n    if (isNaN(numericValue) || numericValue <= 0) {\r\n      setErroValor('Por favor, insira um valor numérico válido (maior que 0,00).');\r\n      return; // Interrompe a submissão se a validação falhar\r\n    }\r\n\r\n    // Se a validação passar, chama a função onSubmit passada como prop\r\n    onSubmit(numericValue);\r\n  };\r\n\r\n  // Lida com o fechamento do popup (botão Cancelar ou clique fora)\r\n  const handleClose = () => {\r\n    setMessage(''); // Limpa a mensagem de validação\r\n    setErroValor(''); // Limpa a mensagem de erro do valor\r\n    setValue('0,00'); // Limpa o input\r\n    onClose(); // Chama a função onClose passada como prop para fechar o popup\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\"> {/* Camada escura por cima da tela */}\r\n      <div className=\"popup\"> {/* Conteúdo do popup */}\r\n        <h3>Gerar Novo Plano com Valor para Economia Mensal</h3>\r\n        <p className=\"popup-description\">\r\n          <span className=\"bold-popup-text\">Explicação:</span> Este valor representa a quantia que você deseja economizar mensalmente.\r\n          Ao inseri-lo, o sistema tentará ajustar as recomendações do seu plano\r\n          para te ajudar a alcançar essa meta de economia, realocando despesas\r\n          ou sugerindo onde cortar gastos para liberar esse valor.\r\n        </p>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\" // Alterado para 'text'\r\n            inputMode=\"numeric\" // Habilita teclado numérico em dispositivos móveis\r\n            step=\"0.01\" // Permite valores com duas casas decimais (embora a formatação manual já cuide disso)\r\n            placeholder=\"Valor para economizar por mês (Ex: 100,00)\"\r\n            value={value}\r\n            onChange={handleValorChange} // Usa a nova função de formatação\r\n            onKeyDown={(e) => { // Impede setas de mover o cursor\r\n              const invalidKeys = [\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\"];\r\n              if (invalidKeys.includes(e.key)) {\r\n                e.preventDefault();\r\n              }\r\n            }}\r\n            onClick={(e) => e.preventDefault()} // Impede seleção ao clicar\r\n            onSelect={(e) => { // Mantém o cursor no final\r\n              const len = e.target.value.length;\r\n              setTimeout(() => e.target.setSelectionRange(len, len), 0);\r\n            }}\r\n            onPaste={(e) => e.preventDefault()} // Impede colar\r\n            disabled={isLoading} // Desabilita o input enquanto está carregando\r\n          />\r\n          {/* Exibe a mensagem de validação interna do popup, se houver */}\r\n          {message && <p className=\"popup-message error-message\">{message}</p>}\r\n          {erroValor && <p className=\"popup-message error-message\">{erroValor}</p>} {/* Exibe a mensagem de erro do valor */}\r\n\r\n          <button type=\"submit\" disabled={isLoading}>\r\n            {isLoading ? 'Gerando...' : 'Gerar Plano'} {/* Texto dinâmico do botão */}\r\n          </button>\r\n          <button type=\"button\" onClick={handleClose} disabled={isLoading}>\r\n            Cancelar\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VEcononoPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}