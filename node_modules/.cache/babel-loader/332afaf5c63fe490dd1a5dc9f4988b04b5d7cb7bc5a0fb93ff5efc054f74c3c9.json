{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\Front\\\\myFinance\\\\src\\\\pages\\\\Planos.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { Chart } from \"react-google-charts\";\nimport authService from \"../services/authService\";\nimport \"../assets/Planos.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Planos = () => {\n  _s();\n  var _dadosPlano$ajustes, _dadosPlano$riscos;\n  const [dadosPlano, setDadosPlano] = useState(null);\n  const [loading, setLoading] = useState(true); // Começa como true para carregar o plano existente na montagem\n  const [error, setError] = useState(null);\n  const formatarValor = valor => {\n    return valor.toLocaleString(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\"\n    });\n  };\n  const categoriaMapeada = {\n    NECESSIDADES: \"Necessidades\",\n    DESEJOS: \"Desejos\",\n    INVESTIMENTO_E_POUPANCA: \"Investimento/Poupança\"\n  };\n  const prepararDadosParaGrafico = (dataArray, titulo) => {\n    const categoriasAgrupadas = dataArray.reduce((acc, item) => {\n      acc[item.categoria] = (acc[item.categoria] || 0) + item.valor;\n      return acc;\n    }, {});\n    const dados = [[\"Categoria\", titulo]];\n    for (const categoria in categoriasAgrupadas) {\n      dados.push([categoriaMapeada[categoria] || categoria, categoriasAgrupadas[categoria]]);\n    }\n    return dados;\n  };\n\n  // Função para carregar o plano mais recente do usuário\n  const carregarPlanoMaisRecente = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n\n      // Chama a função que busca a lista de planos por usuário\n      const response = await authService.buscarPlanosPorUsuario(usuario.id);\n\n      // Verifica se a resposta é um array e se não está vazio\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        var _planoMaisRecente$aju, _planoMaisRecente$ris;\n        // Encontra o plano com o maior ID\n        const planoMaisRecente = response.data.reduce((prev, current) => prev.id > current.id ? prev : current);\n\n        // Verifica se o plano mais recente tem ajustes ou riscos (ou apenas o ID para ser válido)\n        if (planoMaisRecente.id && (((_planoMaisRecente$aju = planoMaisRecente.ajustes) === null || _planoMaisRecente$aju === void 0 ? void 0 : _planoMaisRecente$aju.length) > 0 || ((_planoMaisRecente$ris = planoMaisRecente.riscos) === null || _planoMaisRecente$ris === void 0 ? void 0 : _planoMaisRecente$ris.length) > 0)) {\n          setDadosPlano(planoMaisRecente);\n        } else {\n          setDadosPlano(null); // Plano mais recente encontrado, mas sem conteúdo significativo\n        }\n      } else {\n        setDadosPlano(null); // Nenhuma lista de planos ou lista vazia\n      }\n    } catch (err) {\n      console.error(\"Erro ao carregar o plano mais recente:\", err);\n      if (err.response && err.response.status === 404) {\n        setDadosPlano(null); // Nenhum plano encontrado para o usuário\n      } else if (err.response && err.response.data && err.response.data.message) {\n        setError(`Erro ao carregar plano: ${err.response.data.message}`);\n      } else {\n        setError(\"Não foi possível carregar o plano financeiro. Verifique sua conexão.\");\n      }\n      setDadosPlano(null); // Limpa dados antigos em caso de erro\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Função para gerar um NOVO plano (POST /plano)\n  const gerarNovoPlano = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n\n      // Chama a função para gerar um novo plano\n      const response = await authService.gerarPlano(usuario.id);\n      // Após gerar um novo plano, re-carrega o plano mais recente para garantir que é o exibido\n      // Isso é importante caso o POST retorne apenas o ID ou um subset de dados,\n      // ou caso haja alguma lógica de persistência assíncrona no backend.\n      if (response.data && response.data.id) {\n        // Assume que o POST retorna o ID do novo plano\n        carregarPlanoMaisRecente(); // Recarrega o plano mais recente após a geração\n      } else {\n        setDadosPlano(null); // Se o POST não retornou um plano válido\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\n      }\n    } catch (err) {\n      console.error(\"Erro ao gerar novo plano:\", err);\n      if (err.response && err.response.data && err.response.data.message) {\n        setError(`Erro ao gerar plano: ${err.response.data.message}`);\n      } else {\n        setError(\"Não foi possível gerar um novo plano financeiro. Verifique sua conexão ou tente novamente.\");\n      }\n      setDadosPlano(null); // Limpa dados em caso de erro na geração\n    } finally {\n      setLoading(false);\n    }\n  }, [carregarPlanoMaisRecente]); // Dependência adicionada\n\n  // Efeito para carregar o plano mais recente ao montar a página\n  useEffect(() => {\n    carregarPlanoMaisRecente();\n  }, [carregarPlanoMaisRecente]);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planos-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"planos-header\",\n        children: \"Seu Plano Financeiro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"planos-description\",\n        children: \"Aqui voc\\xEA pode visualizar seu plano financeiro atual. Ele \\xE9 gerado com base nos seus lan\\xE7amentos e oferece recomenda\\xE7\\xF5es de ajustes e identifica \\xE1reas de risco em suas despesas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"gerar-plano-button\",\n          onClick: gerarNovoPlano // Chama a função para gerar novo plano\n          ,\n          disabled: loading // Desabilita o botão enquanto carrega\n          ,\n          children: loading ? \"Gerando Plano...\" : \"Gerar Novo Plano\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message loading-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Carregando plano financeiro...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), !loading && !error && dadosPlano && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-summary\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Entenda seu plano:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this), \"Ajustes Recomendados: Representam oportunidades para otimizar seus gastos. Considere direcionar esses valores para suas economias ou investimentos, visando alcan\\xE7ar seus objetivos financeiros mais rapidamente.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this), \"\\xC1reas de Risco: Indicam despesas que foram identificadas como potencialmente altas. \\xC9 crucial revisar esses itens para identificar onde voc\\xEA pode economizar e evitar que eles comprometam sua sa\\xFAde financeira.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), dadosPlano.ajustes && dadosPlano.ajustes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Ajustes Recomendados\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Estes s\\xE3o os valores e categorias onde voc\\xEA pode ajustar seus gastos para melhorar sua sa\\xFAde financeira. Ao reduzir esses gastos, voc\\xEA pode direcionar mais recursos para suas metas financeiras.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"planos-content-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Chart, {\n                chartType: \"PieChart\",\n                width: \"100%\",\n                height: \"100%\",\n                data: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\"),\n                options: {\n                  title: \"Distribuição dos Ajustes Recomendados\",\n                  pieHole: 0.4,\n                  is3D: false,\n                  legend: {\n                    position: \"bottom\",\n                    alignment: \"center\"\n                  },\n                  colors: ['#28a745', '#007bff', '#ffc107', '#6f42c1', '#17a2b8'],\n                  tooltip: {\n                    trigger: 'focus'\n                  },\n                  backgroundColor: 'transparent'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Detalhes dos Ajustes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: dadosPlano.ajustes.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [categoriaMapeada[item.categoria] || item.categoria, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 27\n                  }, this), \" \", item.subcategoria, \" - \", formatarValor(item.valor)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this), dadosPlano.riscos && dadosPlano.riscos.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\xC1reas de Risco\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Estes gastos foram identificados como potencialmente altos. Recomendamos que voc\\xEA os revise para encontrar oportunidades de economia e evitar desequil\\xEDbrios em suas finan\\xE7as.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"planos-content-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Chart, {\n                chartType: \"BarChart\",\n                width: \"100%\",\n                height: \"100%\",\n                data: prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\"),\n                options: {\n                  title: \"Valores por Categoria de Risco\",\n                  legend: {\n                    position: \"none\"\n                  },\n                  bars: \"horizontal\",\n                  hAxis: {\n                    format: \"currency\"\n                  },\n                  colors: ['#dc3545'],\n                  // Cores para riscos\n                  tooltip: {\n                    trigger: 'focus'\n                  },\n                  backgroundColor: 'transparent'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Detalhes dos Riscos:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: dadosPlano.riscos.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [categoriaMapeada[item.categoria] || item.categoria, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 27\n                  }, this), \" \", item.subcategoria, \" - \", formatarValor(item.valor)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this), !(dadosPlano !== null && dadosPlano !== void 0 && (_dadosPlano$ajustes = dadosPlano.ajustes) !== null && _dadosPlano$ajustes !== void 0 && _dadosPlano$ajustes.length) && !(dadosPlano !== null && dadosPlano !== void 0 && (_dadosPlano$riscos = dadosPlano.riscos) !== null && _dadosPlano$riscos !== void 0 && _dadosPlano$riscos.length) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-message no-data-found-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O plano foi gerado, mas n\\xE3o foram encontrados ajustes ou riscos para o seu perfil financeiro atual. Parece que suas finan\\xE7as est\\xE3o em ordem!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this), dadosPlano.dataAlteracao && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"data-alteracao\",\n          children: [\"\\xDAltima atualiza\\xE7\\xE3o do plano: \", dadosPlano.dataAlteracao]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), !loading && !error && !dadosPlano && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message initial-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Voc\\xEA ainda n\\xE3o possui um plano financeiro salvo ou ele est\\xE1 vazio.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this), \"Clique em \\\"Gerar Novo Plano\\\" para analisar seus gastos e obter recomenda\\xE7\\xF5es personalizadas.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(Planos, \"jsAnM/AtVUN3b5gmxjp70jFTe7k=\");\n_c = Planos;\nexport default Planos;\nvar _c;\n$RefreshReg$(_c, \"Planos\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Layout","Chart","authService","jsxDEV","_jsxDEV","Fragment","_Fragment","Planos","_s","_dadosPlano$ajustes","_dadosPlano$riscos","dadosPlano","setDadosPlano","loading","setLoading","error","setError","formatarValor","valor","toLocaleString","style","currency","categoriaMapeada","NECESSIDADES","DESEJOS","INVESTIMENTO_E_POUPANCA","prepararDadosParaGrafico","dataArray","titulo","categoriasAgrupadas","reduce","acc","item","categoria","dados","push","carregarPlanoMaisRecente","usuario","JSON","parse","localStorage","getItem","id","Error","response","buscarPlanosPorUsuario","Array","isArray","data","length","_planoMaisRecente$aju","_planoMaisRecente$ris","planoMaisRecente","prev","current","ajustes","riscos","err","console","status","message","gerarNovoPlano","gerarPlano","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","chartType","width","height","options","title","pieHole","is3D","legend","position","alignment","colors","tooltip","trigger","backgroundColor","map","index","subcategoria","bars","hAxis","format","dataAlteracao","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/pages/Planos.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport Layout from \"../components/Layout\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport authService from \"../services/authService\";\r\nimport \"../assets/Planos.css\";\r\n\r\nconst Planos = () => {\r\n  const [dadosPlano, setDadosPlano] = useState(null);\r\n  const [loading, setLoading] = useState(true); // Começa como true para carregar o plano existente na montagem\r\n  const [error, setError] = useState(null);\r\n\r\n  const formatarValor = (valor) => {\r\n    return valor.toLocaleString(\"pt-BR\", { style: \"currency\", currency: \"BRL\" });\r\n  };\r\n\r\n  const categoriaMapeada = {\r\n    NECESSIDADES: \"Necessidades\",\r\n    DESEJOS: \"Desejos\",\r\n    INVESTIMENTO_E_POUPANCA: \"Investimento/Poupança\"\r\n  };\r\n\r\n  const prepararDadosParaGrafico = (dataArray, titulo) => {\r\n    const categoriasAgrupadas = dataArray.reduce((acc, item) => {\r\n      acc[item.categoria] = (acc[item.categoria] || 0) + item.valor;\r\n      return acc;\r\n    }, {});\r\n\r\n    const dados = [[\"Categoria\", titulo]];\r\n    for (const categoria in categoriasAgrupadas) {\r\n      dados.push([categoriaMapeada[categoria] || categoria, categoriasAgrupadas[categoria]]);\r\n    }\r\n    return dados;\r\n  };\r\n\r\n  // Função para carregar o plano mais recente do usuário\r\n  const carregarPlanoMaisRecente = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      // Chama a função que busca a lista de planos por usuário\r\n      const response = await authService.buscarPlanosPorUsuario(usuario.id);\r\n\r\n      // Verifica se a resposta é um array e se não está vazio\r\n      if (Array.isArray(response.data) && response.data.length > 0) {\r\n        // Encontra o plano com o maior ID\r\n        const planoMaisRecente = response.data.reduce((prev, current) =>\r\n          (prev.id > current.id) ? prev : current\r\n        );\r\n\r\n        // Verifica se o plano mais recente tem ajustes ou riscos (ou apenas o ID para ser válido)\r\n        if (planoMaisRecente.id && \r\n            (planoMaisRecente.ajustes?.length > 0 || planoMaisRecente.riscos?.length > 0)) {\r\n          setDadosPlano(planoMaisRecente);\r\n        } else {\r\n          setDadosPlano(null); // Plano mais recente encontrado, mas sem conteúdo significativo\r\n        }\r\n      } else {\r\n        setDadosPlano(null); // Nenhuma lista de planos ou lista vazia\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao carregar o plano mais recente:\", err);\r\n      if (err.response && err.response.status === 404) {\r\n        setDadosPlano(null); // Nenhum plano encontrado para o usuário\r\n      } else if (err.response && err.response.data && err.response.data.message) {\r\n        setError(`Erro ao carregar plano: ${err.response.data.message}`);\r\n      } else {\r\n        setError(\"Não foi possível carregar o plano financeiro. Verifique sua conexão.\");\r\n      }\r\n      setDadosPlano(null); // Limpa dados antigos em caso de erro\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Função para gerar um NOVO plano (POST /plano)\r\n  const gerarNovoPlano = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      // Chama a função para gerar um novo plano\r\n      const response = await authService.gerarPlano(usuario.id);\r\n      // Após gerar um novo plano, re-carrega o plano mais recente para garantir que é o exibido\r\n      // Isso é importante caso o POST retorne apenas o ID ou um subset de dados,\r\n      // ou caso haja alguma lógica de persistência assíncrona no backend.\r\n      if (response.data && response.data.id) { // Assume que o POST retorna o ID do novo plano\r\n        carregarPlanoMaisRecente(); // Recarrega o plano mais recente após a geração\r\n      } else {\r\n        setDadosPlano(null); // Se o POST não retornou um plano válido\r\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao gerar novo plano:\", err);\r\n      if (err.response && err.response.data && err.response.data.message) {\r\n        setError(`Erro ao gerar plano: ${err.response.data.message}`);\r\n      } else {\r\n        setError(\"Não foi possível gerar um novo plano financeiro. Verifique sua conexão ou tente novamente.\");\r\n      }\r\n      setDadosPlano(null); // Limpa dados em caso de erro na geração\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [carregarPlanoMaisRecente]); // Dependência adicionada\r\n\r\n  // Efeito para carregar o plano mais recente ao montar a página\r\n  useEffect(() => {\r\n    carregarPlanoMaisRecente();\r\n  }, [carregarPlanoMaisRecente]);\r\n\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"planos-container\">\r\n        <h1 className=\"planos-header\">Seu Plano Financeiro</h1>\r\n        <p className=\"planos-description\">\r\n          Aqui você pode visualizar seu plano financeiro atual. Ele é gerado com base nos seus lançamentos\r\n          e oferece recomendações de ajustes e identifica áreas de risco em suas despesas.\r\n        </p>\r\n\r\n        <div className=\"planos-actions\">\r\n          <button\r\n            className=\"gerar-plano-button\"\r\n            onClick={gerarNovoPlano} // Chama a função para gerar novo plano\r\n            disabled={loading} // Desabilita o botão enquanto carrega\r\n          >\r\n            {loading ? \"Gerando Plano...\" : \"Gerar Novo Plano\"}\r\n          </button>\r\n        </div>\r\n\r\n        {loading && (\r\n          <div className=\"planos-message loading-message\">\r\n            <p>Carregando plano financeiro...</p>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <div className=\"planos-message error-message\">\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Exibe o plano se ele existir e não estiver carregando/houver erro */}\r\n        {!loading && !error && dadosPlano && (\r\n          <>\r\n            <div className=\"planos-summary\">\r\n              <p>\r\n                Entenda seu plano:\r\n                <br></br>\r\n                <br />\r\n                Ajustes Recomendados: Representam oportunidades para otimizar seus gastos.\r\n                Considere direcionar esses valores para suas economias ou investimentos,\r\n                visando alcançar seus objetivos financeiros mais rapidamente.\r\n                <br></br>\r\n                <br />\r\n                Áreas de Risco: Indicam despesas que foram identificadas como potencialmente altas.\r\n                É crucial revisar esses itens para identificar onde você pode economizar\r\n                e evitar que eles comprometam sua saúde financeira.\r\n              </p>\r\n            </div>\r\n\r\n            {dadosPlano.ajustes && dadosPlano.ajustes.length > 0 && (\r\n              <div className=\"planos-section\">\r\n                <h2>Ajustes Recomendados</h2>\r\n                <p>\r\n                  Estes são os valores e categorias onde você pode ajustar seus gastos para melhorar sua saúde financeira.\r\n                  Ao reduzir esses gastos, você pode direcionar mais recursos para suas metas financeiras.\r\n                </p>\r\n                <div className=\"planos-content-grid\">\r\n                  <div className=\"chart-wrapper\">\r\n                    <Chart\r\n                      chartType=\"PieChart\"\r\n                      width=\"100%\"\r\n                      height=\"100%\"\r\n                      data={prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\")}\r\n                      options={{\r\n                        title: \"Distribuição dos Ajustes Recomendados\",\r\n                        pieHole: 0.4,\r\n                        is3D: false,\r\n                        legend: { position: \"bottom\", alignment: \"center\" },\r\n                        colors: ['#28a745', '#007bff', '#ffc107', '#6f42c1', '#17a2b8'],\r\n                        tooltip: { trigger: 'focus' },\r\n                        backgroundColor: 'transparent'\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"list-wrapper\">\r\n                    <h3>Detalhes dos Ajustes:</h3>\r\n                    <ul>\r\n                      {dadosPlano.ajustes.map((item, index) => (\r\n                        <li key={index}>\r\n                          <strong>{categoriaMapeada[item.categoria] || item.categoria}:</strong> {item.subcategoria} - {formatarValor(item.valor)}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {dadosPlano.riscos && dadosPlano.riscos.length > 0 && (\r\n              <div className=\"planos-section\">\r\n                <h2>Áreas de Risco</h2>\r\n                <p>\r\n                  Estes gastos foram identificados como potencialmente altos. Recomendamos que\r\n                  você os revise para encontrar oportunidades de economia e evitar desequilíbrios em suas finanças.\r\n                </p>\r\n                <div className=\"planos-content-grid\">\r\n                  <div className=\"chart-wrapper\">\r\n                    <Chart\r\n                      chartType=\"BarChart\"\r\n                      width=\"100%\"\r\n                      height=\"100%\"\r\n                      data={prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\")}\r\n                      options={{\r\n                        title: \"Valores por Categoria de Risco\",\r\n                        legend: { position: \"none\" },\r\n                        bars: \"horizontal\",\r\n                        hAxis: { format: \"currency\" },\r\n                        colors: ['#dc3545'], // Cores para riscos\r\n                        tooltip: { trigger: 'focus' },\r\n                        backgroundColor: 'transparent'\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"list-wrapper\">\r\n                    <h3>Detalhes dos Riscos:</h3>\r\n                    <ul>\r\n                      {dadosPlano.riscos.map((item, index) => (\r\n                        <li key={index}>\r\n                          <strong>{categoriaMapeada[item.categoria] || item.categoria}:</strong> {item.subcategoria} - {formatarValor(item.valor)}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Mensagem quando o plano existe, mas não tem ajustes ou riscos */}\r\n            {!dadosPlano?.ajustes?.length && !dadosPlano?.riscos?.length && (\r\n              <div className=\"planos-message no-data-found-message\">\r\n                <p>O plano foi gerado, mas não foram encontrados ajustes ou riscos para o seu perfil financeiro atual. Parece que suas finanças estão em ordem!</p>\r\n              </div>\r\n            )}\r\n\r\n            {dadosPlano.dataAlteracao && (\r\n              <p className=\"data-alteracao\">\r\n                Última atualização do plano: {dadosPlano.dataAlteracao}\r\n              </p>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {/* Mensagem quando não há plano para exibir (nem carregando, nem erro) */}\r\n        {!loading && !error && !dadosPlano && (\r\n          <div className=\"planos-message initial-message\">\r\n            <p>\r\n              Você ainda não possui um plano financeiro salvo ou ele está vazio.\r\n              <br />\r\n              Clique em \"Gerar Novo Plano\" para analisar seus gastos e obter recomendações personalizadas.\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Planos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}