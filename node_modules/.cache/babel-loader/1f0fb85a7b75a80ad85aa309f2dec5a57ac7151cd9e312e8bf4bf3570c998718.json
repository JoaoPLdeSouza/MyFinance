{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\React\\\\myfinance\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\n\n// Cria um contexto chamado AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Provedor de autenticação que envolve a aplicação para gerenciar login/logout\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado global de autenticação\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    setIsAuthenticated(!!token); // Verifica se há token salvo e define a autenticação\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      setIsAuthenticated\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"JkS3Meyzlj18m4l86SBr9YDqEkQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/React/myfinance/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\n\r\n// Cria um contexto chamado AuthContext\r\nexport const AuthContext = createContext();\r\n\r\n// Provedor de autenticação que envolve a aplicação para gerenciar login/logout\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado global de autenticação\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    setIsAuthenticated(!!token); // Verifica se há token salvo e define a autenticação\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, setIsAuthenticated }}>\r\n      {children} {/* Renderiza os componentes filhos dentro do contexto */}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/DC,SAAS,CAAC,MAAM;IACd,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3CH,kBAAkB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAACC,WAAW,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEN,eAAe;MAAEC;IAAmB,CAAE;IAAAH,QAAA,GAClEA,QAAQ,EAAC,GAAC;EAAA;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE3B,CAAC;AAACX,EAAA,CAbWF,YAAY;AAAAc,EAAA,GAAZd,YAAY;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}