{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\Front\\\\myFinance\\\\src\\\\pages\\\\Planos.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { Chart } from \"react-google-charts\";\nimport authService from \"../services/authService\";\nimport \"../assets/Planos.css\"; // Certifique-se de que este CSS existe e está correto\nimport VEcononoPopup from \"../components/VEcononoPopup\"; // Componente do popup\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Planos = () => {\n  _s();\n  var _dadosPlano$ajustes, _dadosPlano$riscos;\n  const [dadosPlano, setDadosPlano] = useState(null); // Dados do plano atual exibido\n  const [loading, setLoading] = useState(true); // Estado de carregamento\n  const [error, setError] = useState(null); // Mensagens de erro\n  const [showValueInputPopup, setShowValueInputPopup] = useState(false); // Visibilidade do popup\n  const [todosOsPlanos, setTodosOsPlanos] = useState([]); // Lista de planos para navegação\n  const [currentPlanIndex, setCurrentPlanIndex] = useState(0); // Índice do plano atual na lista\n\n  // Mapeamento de categorias para cores fixas e corretas\n  const categoriaCores = {\n    NECESSIDADES: '#007bff',\n    // Azul\n    DESEJOS: '#dc3545',\n    // Vermelho\n    INVESTIMENTO_E_POUPANCA: '#28a745',\n    // Verde\n    ECONOMIA_PLANEJADA: '#8A2BE2' // Roxo\n  };\n\n  // Função utilitária para formatar valores monetários\n  const formatarValor = valor => {\n    return valor.toLocaleString(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\"\n    });\n  };\n\n  // Mapeamento de categorias para exibição amigável\n  const categoriaMapeada = {\n    NECESSIDADES: \"Necessidades\",\n    DESEJOS: \"Desejos\",\n    INVESTIMENTO_E_POUPANCA: \"Investimento/Poupança\",\n    ECONOMIA_PLANEJADA: \"Economia Planejada\"\n  };\n\n  // Prepara os dados para o gráfico de pizza ou barra\n  // Esta função agora também retorna as cores na ordem correta\n  const prepararDadosParaGrafico = (dataArray, titulo) => {\n    const categoriasAgrupadas = dataArray.reduce((acc, item) => {\n      acc[item.categoria] = (acc[item.categoria] || 0) + item.valor;\n      return acc;\n    }, {});\n    const dados = [[\"Categoria\", titulo]];\n    const coresOrdenadas = [];\n\n    // Itera sobre as categorias em uma ordem fixa (a do categoriaCores)\n    // para garantir que os dados sejam adicionados na mesma ordem que queremos as cores\n    const orderedCategories = Object.keys(categoriaCores);\n    orderedCategories.forEach(categoriaKey => {\n      if (categoriasAgrupadas.hasOwnProperty(categoriaKey)) {\n        dados.push([categoriaMapeada[categoriaKey], categoriasAgrupadas[categoriaKey]]);\n        coresOrdenadas.push(categoriaCores[categoriaKey]);\n      }\n    });\n\n    // Adiciona quaisquer outras categorias que não estejam no mapeamento de cores, se houver\n    // (com uma cor padrão)\n    for (const categoriaKey in categoriasAgrupadas) {\n      if (!orderedCategories.includes(categoriaKey)) {\n        dados.push([categoriaMapeada[categoriaKey] || categoriaKey, categoriasAgrupadas[categoriaKey]]);\n        coresOrdenadas.push('#cccccc'); // Cor padrão para categorias não mapeadas\n      }\n    }\n    return {\n      data: dados,\n      colors: coresOrdenadas\n    };\n  };\n\n  // Carrega os planos financeiros do usuário\n  const carregarPlanosDoUsuario = useCallback(async () => {\n    setLoading(true);\n    setError(null); // Limpa qualquer erro anterior\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n      const response = await authService.buscarPlanosPorUsuario(usuario.id);\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        // Filtra e ordena os planos para pegar os mais recentes\n        const planosDoUsuario = response.data.filter(plano => plano.idUsuario === usuario.id) // Garante que o plano é do usuário correto (se necessário)\n        .sort((a, b) => new Date(b.dataCriacao) - new Date(a.dataCriacao)); // Ordena por data de criação decrescente\n\n        const ultimos3Planos = planosDoUsuario.slice(0, 3); // Pega os 3 planos mais recentes\n        setTodosOsPlanos(ultimos3Planos);\n        if (ultimos3Planos.length > 0) {\n          setDadosPlano(ultimos3Planos[0]); // Exibe o plano mais recente\n          setCurrentPlanIndex(0);\n        } else {\n          setDadosPlano(null); // Nenhum plano encontrado\n          setCurrentPlanIndex(0);\n        }\n      } else {\n        setDadosPlano(null); // Resposta vazia ou não array\n        setTodosOsPlanos([]);\n        setCurrentPlanIndex(0);\n      }\n    } catch (err) {\n      console.error(\"Erro ao carregar os planos:\", err);\n      // Extrai e define a mensagem de erro para o usuário\n      if (err.response && err.response.data && err.response.data.message) {\n        setError(`Erro ao carregar planos: ${err.response.data.message}`);\n      } else if (err.message) {\n        setError(err.message);\n      } else {\n        setError(\"Não foi possível carregar os planos financeiros. Verifique sua conexão.\");\n      }\n      setDadosPlano(null);\n      setTodosOsPlanos([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []); // Dependência: carregarPlanosDoUsuario em si (para useCallback)\n\n  // Gerar um plano padrão (sem valor específico para poupar)\n  const gerarNovoPlano = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n      const response = await authService.gerarPlano(usuario.id); // Não passa valorPraPoupar\n\n      if (response.data && response.data.id) {\n        carregarPlanosDoUsuario(); // Recarrega os planos para mostrar o novo\n      } else {\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\n      }\n    } catch (err) {\n      console.error(\"Erro ao gerar novo plano padrão:\", err);\n      // Trata o erro para exibir ao usuário\n      let errorMessage = \"Não foi possível gerar um novo plano financeiro. Tente novamente.\";\n      if (err.response) {\n        if (err.response.data && err.response.data.message) {\n          errorMessage = err.response.data.message;\n        } else if (err.response.data) {\n          errorMessage = JSON.stringify(err.response.data);\n        } else {\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      setError(errorMessage);\n      setDadosPlano(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [carregarPlanosDoUsuario]);\n\n  // Gerar um plano com um valor específico para poupar\n  const gerarNovoPlanoComValor = useCallback(async valor => {\n    setLoading(true);\n    setError(null); // Limpar erros anteriores\n    setShowValueInputPopup(false); // Fechar popup, será reaberto se houver erro interno no popup\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n\n      // Chama o service, passando o valor para poupar.\n      // O service irá formatá-lo como query parameter para o backend Java.\n      const response = await authService.gerarPlano(usuario.id, valor);\n      if (response.data && response.data.id) {\n        carregarPlanosDoUsuario(); // Recarrega os planos para mostrar o novo\n      } else {\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\n      }\n    } catch (err) {\n      console.error(\"Erro ao gerar novo plano com valor:\", err);\n      // **ESSENCIAL**: Capturar a mensagem de erro específica do backend\n      let errorMessage = \"Ocorreu um erro ao gerar o plano com valor. Tente novamente.\";\n      if (err.response) {\n        // Erro vindo do servidor (Spring Boot)\n        if (err.response.data && err.response.data.message) {\n          errorMessage = err.response.data.message; // Mensagem da RuntimeException do Java\n        } else if (err.response.data) {\n          // Caso o backend retorne um objeto de erro diferente do esperado\n          errorMessage = JSON.stringify(err.response.data);\n        } else {\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\n        }\n      } else if (err.message) {\n        // Erro do JavaScript ou do axios antes da resposta do servidor\n        errorMessage = err.message;\n      }\n      setError(errorMessage);\n      setDadosPlano(null); // Limpa o plano se houver erro na geração\n    } finally {\n      setLoading(false);\n    }\n  }, [carregarPlanosDoUsuario]); // Dependência: carregarPlanosDoUsuario\n\n  // Navegação entre planos anteriores/próximos\n  const handlePreviousPlan = () => {\n    const newIndex = currentPlanIndex + 1;\n    if (newIndex < todosOsPlanos.length) {\n      setCurrentPlanIndex(newIndex);\n      setDadosPlano(todosOsPlanos[newIndex]);\n    }\n  };\n  const handleNextPlan = () => {\n    const newIndex = currentPlanIndex - 1;\n    if (newIndex >= 0) {\n      setCurrentPlanIndex(newIndex);\n      setDadosPlano(todosOsPlanos[newIndex]);\n    }\n  };\n\n  // Efeito para carregar os planos na montagem do componente\n  useEffect(() => {\n    carregarPlanosDoUsuario();\n  }, [carregarPlanosDoUsuario]);\n  const hasMultiplePlans = todosOsPlanos.length > 1; // Verifica se há mais de um plano para navegação\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planos-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"planos-header\",\n        children: \"Seu Plano Financeiro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"planos-description\",\n        children: \"Aqui voc\\xEA pode visualizar seu plano financeiro atual. Ele \\xE9 gerado com base nos seus lan\\xE7amentos e oferece recomenda\\xE7\\xF5es de ajustes e identifica \\xE1reas de risco em suas despesas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-actions-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-action-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"action-description\",\n            children: \"Gere um plano com base nos seus gastos atuais para identificar \\xE1reas de risco e oportunidades de ajuste, ajudando voc\\xEA a sair do vermelho e melhorar sua sa\\xFAde financeira geral.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"gerar-plano-button\",\n            onClick: gerarNovoPlano,\n            disabled: loading,\n            children: loading ? \"Gerando Plano...\" : \"Gerar Plano Padrão\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-action-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"action-description\",\n            children: \"Quer planejar sua economia mensal? Clique no bot\\xE3o abaixo e informe o valor que voc\\xEA deseja economizar por m\\xEAs. A ferramenta ir\\xE1 te ajudar a visualizar como alcan\\xE7ar essa meta!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"gerar-plano-button\",\n            onClick: () => setShowValueInputPopup(true),\n            disabled: loading,\n            children: \"Gerar Plano com Valor de Economia Mensal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message loading-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Carregando plano financeiro...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), !loading && !error && dadosPlano && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Entenda seu plano:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this), \"Ajustes Recomendados: Representam oportunidades para otimizar seus gastos. Considere direcionar esses valores para suas economias ou investimentos, visando alcan\\xE7ar seus objetivos financeiros mais rapidamente.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), \"\\xC1reas de Risco: Indicam despesas que foram identificadas como potencialmente altas. \\xC9 crucial revisar esses itens para identificar onde voc\\xEA pode economizar e evitar que eles comprometam sua sa\\xFAde financeira.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"disclaimer-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-disclaimer\",\n              children: \"Aviso:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 17\n            }, this), \" Esta ferramenta \\xE9 um aux\\xEDlio para seu planejamento financeiro e n\\xE3o substitui o aconselhamento de um profissional. As proje\\xE7\\xF5es s\\xE3o baseadas nos dados fornecidos e n\\xE3o garantem resultados futuros.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), dadosPlano.ajustes && dadosPlano.ajustes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Ajustes Recomendados\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Estes s\\xE3o os valores e categorias onde voc\\xEA pode ajustar seus gastos para melhorar sua sa\\xFAde financeira. Ao reduzir esses gastos, voc\\xEA pode direcionar mais recursos para suas metas financeiras.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"planos-content-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Chart, {\n                chartType: \"PieChart\",\n                width: \"100%\",\n                height: \"100%\",\n                data: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").data,\n                options: {\n                  title: \"Distribuição dos Ajustes Recomendados\",\n                  pieHole: 0.4,\n                  is3D: false,\n                  legend: {\n                    position: \"bottom\",\n                    alignment: \"center\"\n                  },\n                  tooltip: {\n                    trigger: 'focus'\n                  },\n                  backgroundColor: 'transparent',\n                  chartArea: {\n                    left: \"5%\",\n                    top: \"10%\",\n                    width: \"90%\",\n                    height: \"70%\"\n                  },\n                  colors: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").colors\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Detalhes dos Ajustes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: dadosPlano.ajustes.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [categoriaMapeada[item.categoria] || item.categoria, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 27\n                  }, this), \" \", item.subcategoria, \" - \", formatarValor(item.valor)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }, this), dadosPlano.riscos && dadosPlano.riscos.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\xC1reas de Risco\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Estes gastos foram identificados como potencialmente altos. Recomendamos que voc\\xEA os revise para encontrar oportunidades de economia e evitar desequil\\xEDbrios em suas finan\\xE7as.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"planos-content-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Chart, {\n                chartType: \"BarChart\",\n                width: \"100%\",\n                height: \"100%\",\n                data: prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\").data,\n                options: {\n                  title: \"Valores por Categoria de Risco\",\n                  legend: {\n                    position: \"none\"\n                  },\n                  bars: \"horizontal\",\n                  hAxis: {\n                    format: \"currency\"\n                  },\n                  tooltip: {\n                    trigger: 'focus'\n                  },\n                  backgroundColor: 'transparent',\n                  chartArea: {\n                    left: \"15%\",\n                    top: \"10%\",\n                    width: \"70%\",\n                    height: \"70%\"\n                  },\n                  colors: prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\").colors\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Detalhes dos Riscos:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: dadosPlano.riscos.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [categoriaMapeada[item.categoria] || item.categoria, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 27\n                  }, this), \" \", item.subcategoria, \" - \", formatarValor(item.valor)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 15\n        }, this), !(dadosPlano !== null && dadosPlano !== void 0 && (_dadosPlano$ajustes = dadosPlano.ajustes) !== null && _dadosPlano$ajustes !== void 0 && _dadosPlano$ajustes.length) && !(dadosPlano !== null && dadosPlano !== void 0 && (_dadosPlano$riscos = dadosPlano.riscos) !== null && _dadosPlano$riscos !== void 0 && _dadosPlano$riscos.length) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-message no-data-found-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O plano foi gerado, mas n\\xE3o foram encontrados ajustes ou riscos para o seu perfil financeiro atual. Parece que suas finan\\xE7as est\\xE3o em ordem!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 15\n        }, this), dadosPlano.dataAlteracao && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"data-alteracao\",\n          children: [\"\\xDAltima atualiza\\xE7\\xE3o do plano: \", dadosPlano.dataAlteracao]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 15\n        }, this), hasMultiplePlans && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-navigation-pills\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePreviousPlan,\n            disabled: currentPlanIndex === todosOsPlanos.length - 1 || loading,\n            className: `nav-pill-button ${currentPlanIndex === todosOsPlanos.length - 1 ? 'disabled-pill' : ''}`,\n            children: \"Plano Anterior\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"plan-index-display\",\n            children: [\"Plano \", todosOsPlanos.length - currentPlanIndex, \" de \", todosOsPlanos.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextPlan,\n            disabled: currentPlanIndex === 0 || loading,\n            className: `nav-pill-button ${currentPlanIndex === 0 ? 'disabled-pill' : ''}`,\n            children: \"Pr\\xF3ximo Plano\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), !loading && !error && !dadosPlano && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message initial-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Voc\\xEA ainda n\\xE3o possui um plano financeiro salvo ou ele est\\xE1 vazio.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), \"Clique em \\\"Gerar Novo Plano\\\" para analisar seus gastos e obter recomenda\\xE7\\xF5es personalizadas.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VEcononoPopup, {\n        isOpen: showValueInputPopup,\n        onClose: () => setShowValueInputPopup(false),\n        onSubmit: gerarNovoPlanoComValor // Passa a função que lida com o valor para o popup\n        ,\n        isLoading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(Planos, \"eEC7OlQW0357M/FAuh74sbOprJc=\");\n_c = Planos;\nexport default Planos;\nvar _c;\n$RefreshReg$(_c, \"Planos\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Layout","Chart","authService","VEcononoPopup","jsxDEV","_jsxDEV","Fragment","_Fragment","Planos","_s","_dadosPlano$ajustes","_dadosPlano$riscos","dadosPlano","setDadosPlano","loading","setLoading","error","setError","showValueInputPopup","setShowValueInputPopup","todosOsPlanos","setTodosOsPlanos","currentPlanIndex","setCurrentPlanIndex","categoriaCores","NECESSIDADES","DESEJOS","INVESTIMENTO_E_POUPANCA","ECONOMIA_PLANEJADA","formatarValor","valor","toLocaleString","style","currency","categoriaMapeada","prepararDadosParaGrafico","dataArray","titulo","categoriasAgrupadas","reduce","acc","item","categoria","dados","coresOrdenadas","orderedCategories","Object","keys","forEach","categoriaKey","hasOwnProperty","push","includes","data","colors","carregarPlanosDoUsuario","usuario","JSON","parse","localStorage","getItem","id","Error","response","buscarPlanosPorUsuario","Array","isArray","length","planosDoUsuario","filter","plano","idUsuario","sort","a","b","Date","dataCriacao","ultimos3Planos","slice","err","console","message","gerarNovoPlano","gerarPlano","errorMessage","stringify","status","statusText","gerarNovoPlanoComValor","handlePreviousPlan","newIndex","handleNextPlan","hasMultiplePlans","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ajustes","chartType","width","height","options","title","pieHole","is3D","legend","position","alignment","tooltip","trigger","backgroundColor","chartArea","left","top","map","index","subcategoria","riscos","bars","hAxis","format","dataAlteracao","isOpen","onClose","onSubmit","isLoading","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/pages/Planos.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport Layout from \"../components/Layout\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport authService from \"../services/authService\";\r\nimport \"../assets/Planos.css\"; // Certifique-se de que este CSS existe e está correto\r\nimport VEcononoPopup from \"../components/VEcononoPopup\"; // Componente do popup\r\n\r\nconst Planos = () => {\r\n  const [dadosPlano, setDadosPlano] = useState(null); // Dados do plano atual exibido\r\n  const [loading, setLoading] = useState(true); // Estado de carregamento\r\n  const [error, setError] = useState(null); // Mensagens de erro\r\n  const [showValueInputPopup, setShowValueInputPopup] = useState(false); // Visibilidade do popup\r\n  const [todosOsPlanos, setTodosOsPlanos] = useState([]); // Lista de planos para navegação\r\n  const [currentPlanIndex, setCurrentPlanIndex] = useState(0); // Índice do plano atual na lista\r\n\r\n  // Mapeamento de categorias para cores fixas e corretas\r\n  const categoriaCores = {\r\n    NECESSIDADES: '#007bff',        // Azul\r\n    DESEJOS: '#dc3545',             // Vermelho\r\n    INVESTIMENTO_E_POUPANCA: '#28a745', // Verde\r\n    ECONOMIA_PLANEJADA: '#8A2BE2'    // Roxo\r\n  };\r\n\r\n  // Função utilitária para formatar valores monetários\r\n  const formatarValor = (valor) => {\r\n    return valor.toLocaleString(\"pt-BR\", { style: \"currency\", currency: \"BRL\" });\r\n  };\r\n\r\n  // Mapeamento de categorias para exibição amigável\r\n  const categoriaMapeada = {\r\n    NECESSIDADES: \"Necessidades\",\r\n    DESEJOS: \"Desejos\",\r\n    INVESTIMENTO_E_POUPANCA: \"Investimento/Poupança\",\r\n    ECONOMIA_PLANEJADA: \"Economia Planejada\"\r\n  };\r\n\r\n  // Prepara os dados para o gráfico de pizza ou barra\r\n  // Esta função agora também retorna as cores na ordem correta\r\n  const prepararDadosParaGrafico = (dataArray, titulo) => {\r\n    const categoriasAgrupadas = dataArray.reduce((acc, item) => {\r\n      acc[item.categoria] = (acc[item.categoria] || 0) + item.valor;\r\n      return acc;\r\n    }, {});\r\n\r\n    const dados = [[\"Categoria\", titulo]];\r\n    const coresOrdenadas = [];\r\n\r\n    // Itera sobre as categorias em uma ordem fixa (a do categoriaCores)\r\n    // para garantir que os dados sejam adicionados na mesma ordem que queremos as cores\r\n    const orderedCategories = Object.keys(categoriaCores);\r\n\r\n    orderedCategories.forEach(categoriaKey => {\r\n      if (categoriasAgrupadas.hasOwnProperty(categoriaKey)) {\r\n        dados.push([categoriaMapeada[categoriaKey], categoriasAgrupadas[categoriaKey]]);\r\n        coresOrdenadas.push(categoriaCores[categoriaKey]);\r\n      }\r\n    });\r\n\r\n    // Adiciona quaisquer outras categorias que não estejam no mapeamento de cores, se houver\r\n    // (com uma cor padrão)\r\n    for (const categoriaKey in categoriasAgrupadas) {\r\n      if (!orderedCategories.includes(categoriaKey)) {\r\n        dados.push([categoriaMapeada[categoriaKey] || categoriaKey, categoriasAgrupadas[categoriaKey]]);\r\n        coresOrdenadas.push('#cccccc'); // Cor padrão para categorias não mapeadas\r\n      }\r\n    }\r\n    \r\n    return { data: dados, colors: coresOrdenadas };\r\n  };\r\n\r\n  // Carrega os planos financeiros do usuário\r\n  const carregarPlanosDoUsuario = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null); // Limpa qualquer erro anterior\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      const response = await authService.buscarPlanosPorUsuario(usuario.id);\r\n\r\n      if (Array.isArray(response.data) && response.data.length > 0) {\r\n        // Filtra e ordena os planos para pegar os mais recentes\r\n        const planosDoUsuario = response.data\r\n          .filter((plano) => plano.idUsuario === usuario.id) // Garante que o plano é do usuário correto (se necessário)\r\n          .sort((a, b) => new Date(b.dataCriacao) - new Date(a.dataCriacao)); // Ordena por data de criação decrescente\r\n\r\n        const ultimos3Planos = planosDoUsuario.slice(0, 3); // Pega os 3 planos mais recentes\r\n        setTodosOsPlanos(ultimos3Planos);\r\n\r\n        if (ultimos3Planos.length > 0) {\r\n          setDadosPlano(ultimos3Planos[0]); // Exibe o plano mais recente\r\n          setCurrentPlanIndex(0);\r\n        } else {\r\n          setDadosPlano(null); // Nenhum plano encontrado\r\n          setCurrentPlanIndex(0);\r\n        }\r\n      } else {\r\n        setDadosPlano(null); // Resposta vazia ou não array\r\n        setTodosOsPlanos([]);\r\n        setCurrentPlanIndex(0);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao carregar os planos:\", err);\r\n      // Extrai e define a mensagem de erro para o usuário\r\n      if (err.response && err.response.data && err.response.data.message) {\r\n        setError(`Erro ao carregar planos: ${err.response.data.message}`);\r\n      } else if (err.message) {\r\n        setError(err.message);\r\n      } else {\r\n        setError(\"Não foi possível carregar os planos financeiros. Verifique sua conexão.\");\r\n      }\r\n      setDadosPlano(null);\r\n      setTodosOsPlanos([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []); // Dependência: carregarPlanosDoUsuario em si (para useCallback)\r\n\r\n  // Gerar um plano padrão (sem valor específico para poupar)\r\n  const gerarNovoPlano = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      const response = await authService.gerarPlano(usuario.id); // Não passa valorPraPoupar\r\n\r\n      if (response.data && response.data.id) {\r\n        carregarPlanosDoUsuario(); // Recarrega os planos para mostrar o novo\r\n      } else {\r\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao gerar novo plano padrão:\", err);\r\n      // Trata o erro para exibir ao usuário\r\n      let errorMessage = \"Não foi possível gerar um novo plano financeiro. Tente novamente.\";\r\n      if (err.response) {\r\n        if (err.response.data && err.response.data.message) {\r\n          errorMessage = err.response.data.message;\r\n        } else if (err.response.data) {\r\n          errorMessage = JSON.stringify(err.response.data);\r\n        } else {\r\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\r\n        }\r\n      } else if (err.message) {\r\n        errorMessage = err.message;\r\n      }\r\n      setError(errorMessage);\r\n      setDadosPlano(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [carregarPlanosDoUsuario]);\r\n\r\n  // Gerar um plano com um valor específico para poupar\r\n  const gerarNovoPlanoComValor = useCallback(async (valor) => {\r\n    setLoading(true);\r\n    setError(null); // Limpar erros anteriores\r\n    setShowValueInputPopup(false); // Fechar popup, será reaberto se houver erro interno no popup\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      // Chama o service, passando o valor para poupar.\r\n      // O service irá formatá-lo como query parameter para o backend Java.\r\n      const response = await authService.gerarPlano(usuario.id, valor);\r\n\r\n      if (response.data && response.data.id) {\r\n        carregarPlanosDoUsuario(); // Recarrega os planos para mostrar o novo\r\n      } else {\r\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao gerar novo plano com valor:\", err);\r\n      // **ESSENCIAL**: Capturar a mensagem de erro específica do backend\r\n      let errorMessage = \"Ocorreu um erro ao gerar o plano com valor. Tente novamente.\";\r\n      if (err.response) {\r\n        // Erro vindo do servidor (Spring Boot)\r\n        if (err.response.data && err.response.data.message) {\r\n          errorMessage = err.response.data.message; // Mensagem da RuntimeException do Java\r\n        } else if (err.response.data) {\r\n          // Caso o backend retorne um objeto de erro diferente do esperado\r\n          errorMessage = JSON.stringify(err.response.data);\r\n        } else {\r\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\r\n        }\r\n      } else if (err.message) {\r\n        // Erro do JavaScript ou do axios antes da resposta do servidor\r\n        errorMessage = err.message;\r\n      }\r\n      setError(errorMessage);\r\n      setDadosPlano(null); // Limpa o plano se houver erro na geração\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [carregarPlanosDoUsuario]); // Dependência: carregarPlanosDoUsuario\r\n\r\n  // Navegação entre planos anteriores/próximos\r\n  const handlePreviousPlan = () => {\r\n    const newIndex = currentPlanIndex + 1;\r\n    if (newIndex < todosOsPlanos.length) {\r\n      setCurrentPlanIndex(newIndex);\r\n      setDadosPlano(todosOsPlanos[newIndex]);\r\n    }\r\n  };\r\n\r\n  const handleNextPlan = () => {\r\n    const newIndex = currentPlanIndex - 1;\r\n    if (newIndex >= 0) {\r\n      setCurrentPlanIndex(newIndex);\r\n      setDadosPlano(todosOsPlanos[newIndex]);\r\n    }\r\n  };\r\n\r\n  // Efeito para carregar os planos na montagem do componente\r\n  useEffect(() => {\r\n    carregarPlanosDoUsuario();\r\n  }, [carregarPlanosDoUsuario]);\r\n\r\n  const hasMultiplePlans = todosOsPlanos.length > 1; // Verifica se há mais de um plano para navegação\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"planos-container\">\r\n        <h1 className=\"planos-header\">Seu Plano Financeiro</h1>\r\n        <p className=\"planos-description\">\r\n          Aqui você pode visualizar seu plano financeiro atual. Ele é gerado com base nos seus lançamentos\r\n          e oferece recomendações de ajustes e identifica áreas de risco em suas despesas.\r\n        </p>\r\n\r\n        <div className=\"planos-actions-group\">\r\n          <div className=\"plan-action-card\">\r\n            <p className=\"action-description\">\r\n              Gere um plano com base nos seus gastos atuais para identificar áreas de risco e oportunidades de ajuste,\r\n              ajudando você a sair do vermelho e melhorar sua saúde financeira geral.\r\n            </p>\r\n            <button\r\n              className=\"gerar-plano-button\"\r\n              onClick={gerarNovoPlano}\r\n              disabled={loading}\r\n            >\r\n              {loading ? \"Gerando Plano...\" : \"Gerar Plano Padrão\"}\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"plan-action-card\">\r\n            <p className=\"action-description\">\r\n              Quer planejar sua economia mensal? Clique no botão abaixo e informe\r\n              o valor que você deseja economizar por mês. A ferramenta irá te ajudar a visualizar\r\n              como alcançar essa meta!\r\n            </p>\r\n            <button\r\n              className=\"gerar-plano-button\"\r\n              onClick={() => setShowValueInputPopup(true)}\r\n              disabled={loading}\r\n            >\r\n              Gerar Plano com Valor de Economia Mensal\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mensagens de estado: carregando, erro, sem dados */}\r\n        {loading && (\r\n          <div className=\"planos-message loading-message\">\r\n            <p>Carregando plano financeiro...</p>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <div className=\"planos-message error-message\">\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {!loading && !error && dadosPlano && (\r\n          <>\r\n            <div className=\"planos-summary\">\r\n              <p>\r\n                Entenda seu plano:\r\n                <br></br>\r\n                <br />\r\n                Ajustes Recomendados: Representam oportunidades para otimizar seus gastos.\r\n                Considere direcionar esses valores para suas economias ou investimentos,\r\n                visando alcançar seus objetivos financeiros mais rapidamente.\r\n                <br></br>\r\n                <br />\r\n                Áreas de Risco: Indicam despesas que foram identificadas como potencialmente altas.\r\n                É crucial revisar esses itens para identificar onde você pode economizar\r\n                e evitar que eles comprometam sua saúde financeira.\r\n              </p>\r\n              <p className=\"disclaimer-text\">\r\n                <span className=\"bold-disclaimer\">Aviso:</span> Esta ferramenta é um auxílio para seu planejamento financeiro e não\r\n                substitui o aconselhamento de um profissional. As projeções são baseadas nos dados fornecidos\r\n                e não garantem resultados futuros.\r\n              </p>\r\n            </div>\r\n\r\n            {/* Seção de Ajustes Recomendados */}\r\n            {dadosPlano.ajustes && dadosPlano.ajustes.length > 0 && (\r\n              <div className=\"planos-section\">\r\n                <h2>Ajustes Recomendados</h2>\r\n                <p>\r\n                  Estes são os valores e categorias onde você pode ajustar seus gastos para melhorar sua saúde financeira.\r\n                  Ao reduzir esses gastos, você pode direcionar mais recursos para suas metas financeiras.\r\n                </p>\r\n                <div className=\"planos-content-grid\">\r\n                  <div className=\"chart-wrapper\">\r\n                    <Chart\r\n                      chartType=\"PieChart\"\r\n                      width=\"100%\"\r\n                      height=\"100%\"\r\n                      data={prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").data}\r\n                      options={{\r\n                        title: \"Distribuição dos Ajustes Recomendados\",\r\n                        pieHole: 0.4,\r\n                        is3D: false,\r\n                        legend: { position: \"bottom\", alignment: \"center\" },\r\n                        tooltip: { trigger: 'focus' },\r\n                        backgroundColor: 'transparent',\r\n                        chartArea: { left: \"5%\", top: \"10%\", width: \"90%\", height: \"70%\" },\r\n                        colors: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").colors\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"list-wrapper\">\r\n                    <h3>Detalhes dos Ajustes:</h3>\r\n                    <ul>\r\n                      {dadosPlano.ajustes.map((item, index) => (\r\n                        <li key={index}>\r\n                          <strong>{categoriaMapeada[item.categoria] || item.categoria}:</strong> {item.subcategoria} - {formatarValor(item.valor)}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Seção de Áreas de Risco */}\r\n            {dadosPlano.riscos && dadosPlano.riscos.length > 0 && (\r\n              <div className=\"planos-section\">\r\n                <h2>Áreas de Risco</h2>\r\n                <p>\r\n                  Estes gastos foram identificados como potencialmente altos. Recomendamos que\r\n                  você os revise para encontrar oportunidades de economia e evitar desequilíbrios em suas finanças.\r\n                </p>\r\n                <div className=\"planos-content-grid\">\r\n                  <div className=\"chart-wrapper\">\r\n                    <Chart\r\n                      chartType=\"BarChart\"\r\n                      width=\"100%\"\r\n                      height=\"100%\"\r\n                      data={prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\").data}\r\n                      options={{\r\n                        title: \"Valores por Categoria de Risco\",\r\n                        legend: { position: \"none\" },\r\n                        bars: \"horizontal\",\r\n                        hAxis: { format: \"currency\" },\r\n                        tooltip: { trigger: 'focus' },\r\n                        backgroundColor: 'transparent',\r\n                        chartArea: { left: \"15%\", top: \"10%\", width: \"70%\", height: \"70%\" },\r\n                        colors: prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\").colors\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"list-wrapper\">\r\n                    <h3>Detalhes dos Riscos:</h3>\r\n                    <ul>\r\n                      {dadosPlano.riscos.map((item, index) => (\r\n                        <li key={index}>\r\n                          <strong>{categoriaMapeada[item.categoria] || item.categoria}:</strong> {item.subcategoria} - {formatarValor(item.valor)}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Mensagem se não há ajustes nem riscos */}\r\n            {!dadosPlano?.ajustes?.length && !dadosPlano?.riscos?.length && (\r\n              <div className=\"planos-message no-data-found-message\">\r\n                <p>O plano foi gerado, mas não foram encontrados ajustes ou riscos para o seu perfil financeiro atual. Parece que suas finanças estão em ordem!</p>\r\n              </div>\r\n            )}\r\n\r\n            {dadosPlano.dataAlteracao && (\r\n              <p className=\"data-alteracao\">\r\n                Última atualização do plano: {dadosPlano.dataAlteracao}\r\n              </p>\r\n            )}\r\n\r\n            {/* Navegação entre planos */}\r\n            {hasMultiplePlans && (\r\n              <div className=\"plan-navigation-pills\">\r\n                <button\r\n                  onClick={handlePreviousPlan}\r\n                  disabled={currentPlanIndex === todosOsPlanos.length - 1 || loading}\r\n                  className={`nav-pill-button ${currentPlanIndex === todosOsPlanos.length - 1 ? 'disabled-pill' : ''}`}\r\n                >\r\n                  Plano Anterior\r\n                </button>\r\n                <span className=\"plan-index-display\">\r\n                  Plano {todosOsPlanos.length - currentPlanIndex} de {todosOsPlanos.length}\r\n                </span>\r\n                <button\r\n                  onClick={handleNextPlan}\r\n                  disabled={currentPlanIndex === 0 || loading}\r\n                  className={`nav-pill-button ${currentPlanIndex === 0 ? 'disabled-pill' : ''}`}\r\n                >\r\n                  Próximo Plano\r\n                </button>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {/* Mensagem inicial quando não há planos e não há erros */}\r\n        {!loading && !error && !dadosPlano && (\r\n          <div className=\"planos-message initial-message\">\r\n            <p>\r\n              Você ainda não possui um plano financeiro salvo ou ele está vazio.\r\n              <br />\r\n              Clique em \"Gerar Novo Plano\" para analisar seus gastos e obter recomendações personalizadas.\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Componente do popup para entrada de valor */}\r\n        <VEcononoPopup\r\n          isOpen={showValueInputPopup}\r\n          onClose={() => setShowValueInputPopup(false)}\r\n          onSubmit={gerarNovoPlanoComValor} // Passa a função que lida com o valor para o popup\r\n          isLoading={loading}\r\n        />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Planos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}