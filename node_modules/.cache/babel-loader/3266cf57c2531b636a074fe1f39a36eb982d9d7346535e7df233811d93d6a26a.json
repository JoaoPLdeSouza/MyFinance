{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\Front\\\\myFinance\\\\src\\\\components\\\\VEcononoPopup.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../assets/Popup.css'; // Certifique-se de que este CSS existe e está correto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VEcononoPopup = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  isLoading\n}) => {\n  _s();\n  const [value, setValue] = useState(''); // Estado para o valor do input\n  const [message, setMessage] = useState(''); // Mensagem de erro/validação interna do popup\n\n  // Efeito para limpar a mensagem de validação interna do popup quando ele é aberto ou fechado\n  useEffect(() => {\n    if (isOpen) {\n      setMessage(''); // Limpa a mensagem ao abrir o popup\n    }\n  }, [isOpen]);\n\n  // Se o popup não estiver aberto, não renderiza nada\n  if (!isOpen) return null;\n\n  // Lida com a submissão do formulário no popup\n  const handleSubmit = e => {\n    e.preventDefault(); // Previne o comportamento padrão de recarregar a página\n    const numericValue = parseFloat(value); // Converte o valor do input para número\n\n    // Validação básica no front-end: verifica se é um número válido e positivo\n    if (isNaN(numericValue) || numericValue <= 0) {\n      setMessage('Por favor, insira um valor numérico válido e positivo.');\n      return; // Interrompe a submissão se a validação falhar\n    }\n\n    // Se a validação passar, chama a função onSubmit passada como prop\n    onSubmit(numericValue);\n    // Não limpa o `value` aqui. Ele será limpo no `handleClose` ou quando o plano for gerado com sucesso\n    // (o que fará com que o popup seja fechado ou recarregue a página, limpando o estado).\n  };\n\n  // Lida com o fechamento do popup (botão Cancelar ou clique fora)\n  const handleClose = () => {\n    setMessage(''); // Limpa a mensagem de validação\n    setValue(''); // Limpa o input\n    onClose(); // Chama a função onClose passada como prop para fechar o popup\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Gerar Novo Plano com Valor para Economia Mensal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"popup-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bold-popup-text\",\n          children: \"Explica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), \" Este valor representa a quantia que voc\\xEA deseja economizar mensalmente. Ao inseri-lo, o sistema tentar\\xE1 ajustar as recomenda\\xE7\\xF5es do seu plano para te ajudar a alcan\\xE7ar essa meta de economia, realocando despesas ou sugerindo onde cortar gastos para liberar esse valor.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\" // Tipo numérico para teclado numérico em celulares e validação do navegador\n          ,\n          step: \"0.01\" // Permite valores com duas casas decimais\n          ,\n          placeholder: \"Valor para economizar por m\\xEAs (Ex: 100.00)\",\n          value: value,\n          onChange: e => setValue(e.target.value),\n          disabled: isLoading // Desabilita o input enquanto está carregando\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"popup-message error-message\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          children: [isLoading ? 'Gerando...' : 'Gerar Plano', \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleClose,\n          disabled: isLoading,\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(VEcononoPopup, \"iTfSUvNpZufo0BU3mTu3cqnuqAI=\");\n_c = VEcononoPopup;\nexport default VEcononoPopup;\nvar _c;\n$RefreshReg$(_c, \"VEcononoPopup\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","VEcononoPopup","isOpen","onClose","onSubmit","isLoading","_s","value","setValue","message","setMessage","handleSubmit","e","preventDefault","numericValue","parseFloat","isNaN","handleClose","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","step","placeholder","onChange","target","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/components/VEcononoPopup.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../assets/Popup.css'; // Certifique-se de que este CSS existe e está correto\r\n\r\nconst VEcononoPopup = ({ isOpen, onClose, onSubmit, isLoading }) => {\r\n  const [value, setValue] = useState(''); // Estado para o valor do input\r\n  const [message, setMessage] = useState(''); // Mensagem de erro/validação interna do popup\r\n\r\n  // Efeito para limpar a mensagem de validação interna do popup quando ele é aberto ou fechado\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setMessage(''); // Limpa a mensagem ao abrir o popup\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Se o popup não estiver aberto, não renderiza nada\r\n  if (!isOpen) return null;\r\n\r\n  // Lida com a submissão do formulário no popup\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Previne o comportamento padrão de recarregar a página\r\n    const numericValue = parseFloat(value); // Converte o valor do input para número\r\n\r\n    // Validação básica no front-end: verifica se é um número válido e positivo\r\n    if (isNaN(numericValue) || numericValue <= 0) {\r\n      setMessage('Por favor, insira um valor numérico válido e positivo.');\r\n      return; // Interrompe a submissão se a validação falhar\r\n    }\r\n\r\n    // Se a validação passar, chama a função onSubmit passada como prop\r\n    onSubmit(numericValue);\r\n    // Não limpa o `value` aqui. Ele será limpo no `handleClose` ou quando o plano for gerado com sucesso\r\n    // (o que fará com que o popup seja fechado ou recarregue a página, limpando o estado).\r\n  };\r\n\r\n  // Lida com o fechamento do popup (botão Cancelar ou clique fora)\r\n  const handleClose = () => {\r\n    setMessage(''); // Limpa a mensagem de validação\r\n    setValue(''); // Limpa o input\r\n    onClose(); // Chama a função onClose passada como prop para fechar o popup\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\"> {/* Camada escura por cima da tela */}\r\n      <div className=\"popup\"> {/* Conteúdo do popup */}\r\n        <h3>Gerar Novo Plano com Valor para Economia Mensal</h3>\r\n        <p className=\"popup-description\">\r\n          <span className=\"bold-popup-text\">Explicação:</span> Este valor representa a quantia que você deseja economizar mensalmente.\r\n          Ao inseri-lo, o sistema tentará ajustar as recomendações do seu plano\r\n          para te ajudar a alcançar essa meta de economia, realocando despesas\r\n          ou sugerindo onde cortar gastos para liberar esse valor.\r\n        </p>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"number\" // Tipo numérico para teclado numérico em celulares e validação do navegador\r\n            step=\"0.01\" // Permite valores com duas casas decimais\r\n            placeholder=\"Valor para economizar por mês (Ex: 100.00)\"\r\n            value={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            disabled={isLoading} // Desabilita o input enquanto está carregando\r\n          />\r\n          {/* Exibe a mensagem de validação interna do popup, se houver */}\r\n          {message && <p className=\"popup-message error-message\">{message}</p>}\r\n          <button type=\"submit\" disabled={isLoading}>\r\n            {isLoading ? 'Gerando...' : 'Gerar Plano'} {/* Texto dinâmico do botão */}\r\n          </button>\r\n          <button type=\"button\" onClick={handleClose} disabled={isLoading}>\r\n            Cancelar\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VEcononoPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}