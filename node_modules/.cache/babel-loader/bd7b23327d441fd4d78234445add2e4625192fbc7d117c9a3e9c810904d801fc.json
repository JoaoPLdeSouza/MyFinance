{"ast":null,"code":"import axios from \"axios\";\n\n// Certifique-se de que esta URL está correta para seu backend\n// É uma boa prática ter isso em uma variável de ambiente ou um arquivo de configuração separado\nconst API_URL = \"http://localhost:9087\";\nconst login = async ({\n  email,\n  senha\n}) => {\n  try {\n    return await axios.post(`${API_URL}/login`, {\n      email,\n      senha\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 5000 // 5 segundos\n    });\n  } catch (error) {\n    console.error(\"Erro no login:\", error);\n    throw error; // Propagar o erro para o componente que chamou\n  }\n};\nconst register = async usuario => {\n  try {\n    return await axios.post(`${API_URL}/usuario/cadastrar`, usuario);\n  } catch (error) {\n    console.error(\"Erro no registro:\", error);\n    throw error;\n  }\n};\nconst getUserById = async id => {\n  try {\n    return await axios.get(`${API_URL}/usuario/buscar/${id}`);\n  } catch (error) {\n    console.error(\"Erro ao buscar usuário por ID:\", error);\n    throw error;\n  }\n};\nconst alterarSenha = async (id, request) => {\n  try {\n    return await axios.put(`${API_URL}/usuario/alterar/senha?id=${id}`, request);\n  } catch (error) {\n    console.error(\"Erro ao alterar senha:\", error);\n    throw error;\n  }\n};\nconst delet = async id => {\n  try {\n    // Note: Esta função parece ser para `usuario_gasto/delete`, verificar se é o endpoint correto\n    return await axios.delete(`${API_URL}/usuario_gasto/delete?id=${id}`);\n  } catch (error) {\n    console.error(\"Erro ao deletar usuário_gasto:\", error);\n    throw error;\n  }\n};\nconst alterarDadosUsuario = async (id, dados) => {\n  try {\n    return await axios.put(`${API_URL}/usuario/alterar?id=${id}`, dados);\n  } catch (error) {\n    console.error(\"Erro ao alterar dados do usuário:\", error);\n    throw error;\n  }\n};\nconst alterarEmail = async (id, email, senha) => {\n  try {\n    return await axios.put(`${API_URL}/usuario/alterar/email?id=${id}`, {\n      email,\n      senha\n    });\n  } catch (error) {\n    console.error(\"Erro ao alterar email:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Busca lançamentos por usuário, com filtro opcional por datas.\r\n * Garante que dataInicio e dataFinal sejam enviadas no body, mesmo que vazias,\r\n * e que o idUsuario seja um parâmetro de query.\r\n *\r\n * @param {number} idUsuario O ID do usuário.\r\n * @param {object} [filtrosData] Objeto opcional contendo as datas para filtro.\r\n * @param {string} [filtrosData.dataInicio] Data de início para o filtro (formato \"DD/MM/YYYY\").\r\n * @param {string} [filtrosData.dataFinal] Data final para o filtro (formato \"DD/MM/YYYY\").\r\n */\nconst buscarLancamentosPorUsuario = async (idUsuario, filtrosData = {}) => {\n  try {\n    // A chave para o filtro funcionar conforme as imagens:\n    // Sempre enviar dataInicio e dataFinal no request body, mesmo que vazios.\n    const requestBody = {\n      dataInicio: filtrosData.dataInicio || \"\",\n      // Se não existir, define como string vazia\n      dataFinal: filtrosData.dataFinal || \"\" // Se não existir, define como string vazia\n    };\n\n    // Mantendo o endpoint original que funcionava, com idUsuario como query param.\n    // Baseado na imagem_36ee14.png, o idUsuario é um query parameter.\n    const response = await axios.post(`${API_URL}/gasto/buscar/categoria`, requestBody, {\n      params: {\n        idUsuario\n      },\n      // idUsuario como query parameter\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Erro ao buscar lançamentos por usuário:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nconst alterarGasto = async (id, gasto) => {\n  try {\n    // A API espera 'dataHora' no formato \"DD/MM/YYYY\".\n    // O frontend (Lancamentos.js e EditarModal) deve garantir que 'gasto.dataHora'\n    // já esteja neste formato antes de chamar esta função.\n    return await axios.put(`${API_URL}/gasto/alterar`, gasto, {\n      // Endpoint: /gasto/alterar\n      params: {\n        id\n      } // ID como query parameter\n    });\n  } catch (error) {\n    console.error(\"Erro ao alterar gasto:\", error);\n    throw error;\n  }\n};\nconst cadastrarGasto = async (idUsuario, dados) => {\n  try {\n    // O frontend (Lancamentos.js e NovoModal) deve garantir que 'dados.dataHora'\n    // já esteja no formato \"DD/MM/YYYY\" antes de chamar esta função.\n    return await axios.post(`${API_URL}/gasto/cadastrar`, dados, {\n      params: {\n        idUsuario\n      } // ID como query parameter\n    });\n  } catch (error) {\n    console.error(\"Erro ao cadastrar gasto:\", error);\n    throw error;\n  }\n};\nconst deletarGasto = async id => {\n  try {\n    return await axios.delete(`${API_URL}/gasto/deletar`, {\n      params: {\n        id\n      } // ID como query parameter\n    });\n  } catch (error) {\n    console.error(\"Erro ao deletar gasto:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Gera um novo plano financeiro para o usuário.\r\n * O valor para poupar é opcional e enviado como um parâmetro de query.\r\n * @param {number} idUsuario O ID do usuário.\r\n * @param {number} [valorPraPoupar] O valor opcional que o usuário deseja poupar por mês.\r\n */\nconst gerarPlano = async (idUsuario, valorPraPoupar = null) => {\n  try {\n    // Constrói a URL base com idUsuario como query parameter.\n    let url = `${API_URL}/plano?idUsuario=${idUsuario}`;\n\n    // Se valorPraPoupar for fornecido (não nulo/indefinido) e for um número válido,\n    // adicione-o como um parâmetro de query adicional na URL.\n    // parseFloat garante que o valor é um número, e encodeURIComponent o codifica para a URL.\n    if (valorPraPoupar !== null && valorPraPoupar !== undefined && !isNaN(parseFloat(valorPraPoupar))) {\n      url += `&valorPraPoupar=${encodeURIComponent(parseFloat(valorPraPoupar))}`;\n    }\n\n    // Realiza a requisição POST para a URL construída.\n    // O segundo argumento de axios.post é o corpo da requisição (body),\n    // que é null aqui, pois os parâmetros são enviados na URL (query string),\n    // conforme o @RequestParam do seu backend.\n    const response = await axios.post(url, null);\n    return response;\n  } catch (error) {\n    console.error(\"Erro ao gerar plano:\", error);\n    throw error; // Propagar o erro para o componente para tratamento de UI\n  }\n};\nconst buscarPlanosPorUsuario = async idUsuario => {\n  try {\n    return await axios.get(`${API_URL}/plano/usuario`, {\n      params: {\n        idUsuario\n      }\n    });\n  } catch (error) {\n    console.error(\"Erro ao buscar planos por usuário:\", error);\n    throw error;\n  }\n};\nconst authService = {\n  login,\n  register,\n  getUserById,\n  alterarSenha,\n  delet,\n  alterarDadosUsuario,\n  alterarEmail,\n  buscarLancamentosPorUsuario,\n  alterarGasto,\n  cadastrarGasto,\n  deletarGasto,\n  gerarPlano,\n  buscarPlanosPorUsuario\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","login","email","senha","post","headers","timeout","error","console","register","usuario","getUserById","id","get","alterarSenha","request","put","delet","delete","alterarDadosUsuario","dados","alterarEmail","buscarLancamentosPorUsuario","idUsuario","filtrosData","requestBody","dataInicio","dataFinal","response","params","data","_error$response","message","alterarGasto","gasto","cadastrarGasto","deletarGasto","gerarPlano","valorPraPoupar","url","undefined","isNaN","parseFloat","encodeURIComponent","buscarPlanosPorUsuario","authService"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/services/authService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Certifique-se de que esta URL está correta para seu backend\r\n// É uma boa prática ter isso em uma variável de ambiente ou um arquivo de configuração separado\r\nconst API_URL = \"http://localhost:9087\"; \r\n\r\nconst login = async ({ email, senha }) => {\r\n  try {\r\n    return await axios.post(`${API_URL}/login`, { email, senha }, {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      timeout: 5000 // 5 segundos\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro no login:\", error);\r\n    throw error; // Propagar o erro para o componente que chamou\r\n  }\r\n};\r\n\r\nconst register = async (usuario) => {\r\n  try {\r\n    return await axios.post(`${API_URL}/usuario/cadastrar`, usuario);\r\n  } catch (error) {\r\n    console.error(\"Erro no registro:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getUserById = async (id) => {\r\n  try {\r\n    return await axios.get(`${API_URL}/usuario/buscar/${id}`);\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar usuário por ID:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst alterarSenha = async (id, request) => {\r\n  try {\r\n    return await axios.put(`${API_URL}/usuario/alterar/senha?id=${id}`, request);\r\n  } catch (error) {\r\n    console.error(\"Erro ao alterar senha:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst delet = async (id) => {\r\n  try {\r\n    // Note: Esta função parece ser para `usuario_gasto/delete`, verificar se é o endpoint correto\r\n    return await axios.delete(`${API_URL}/usuario_gasto/delete?id=${id}`);\r\n  } catch (error) {\r\n    console.error(\"Erro ao deletar usuário_gasto:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst alterarDadosUsuario = async (id, dados) => {\r\n  try {\r\n    return await axios.put(`${API_URL}/usuario/alterar?id=${id}`, dados);\r\n  } catch (error) {\r\n    console.error(\"Erro ao alterar dados do usuário:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst alterarEmail = async (id, email, senha) => {\r\n  try {\r\n    return await axios.put(`${API_URL}/usuario/alterar/email?id=${id}`, { email, senha });\r\n  } catch (error) {\r\n    console.error(\"Erro ao alterar email:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Busca lançamentos por usuário, com filtro opcional por datas.\r\n * Garante que dataInicio e dataFinal sejam enviadas no body, mesmo que vazias,\r\n * e que o idUsuario seja um parâmetro de query.\r\n *\r\n * @param {number} idUsuario O ID do usuário.\r\n * @param {object} [filtrosData] Objeto opcional contendo as datas para filtro.\r\n * @param {string} [filtrosData.dataInicio] Data de início para o filtro (formato \"DD/MM/YYYY\").\r\n * @param {string} [filtrosData.dataFinal] Data final para o filtro (formato \"DD/MM/YYYY\").\r\n */\r\nconst buscarLancamentosPorUsuario = async (idUsuario, filtrosData = {}) => {\r\n  try {\r\n    // A chave para o filtro funcionar conforme as imagens:\r\n    // Sempre enviar dataInicio e dataFinal no request body, mesmo que vazios.\r\n    const requestBody = {\r\n      dataInicio: filtrosData.dataInicio || \"\", // Se não existir, define como string vazia\r\n      dataFinal: filtrosData.dataFinal || \"\"    // Se não existir, define como string vazia\r\n    };\r\n    \r\n    // Mantendo o endpoint original que funcionava, com idUsuario como query param.\r\n    // Baseado na imagem_36ee14.png, o idUsuario é um query parameter.\r\n    const response = await axios.post(`${API_URL}/gasto/buscar/categoria`, requestBody, {\r\n      params: { idUsuario }, // idUsuario como query parameter\r\n      headers: { \"Content-Type\": \"application/json\" }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar lançamentos por usuário:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst alterarGasto = async (id, gasto) => {\r\n  try {\r\n    // A API espera 'dataHora' no formato \"DD/MM/YYYY\".\r\n    // O frontend (Lancamentos.js e EditarModal) deve garantir que 'gasto.dataHora'\r\n    // já esteja neste formato antes de chamar esta função.\r\n    return await axios.put(`${API_URL}/gasto/alterar`, gasto, { // Endpoint: /gasto/alterar\r\n      params: { id } // ID como query parameter\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro ao alterar gasto:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst cadastrarGasto = async (idUsuario, dados) => {\r\n  try {\r\n    // O frontend (Lancamentos.js e NovoModal) deve garantir que 'dados.dataHora'\r\n    // já esteja no formato \"DD/MM/YYYY\" antes de chamar esta função.\r\n    return await axios.post(`${API_URL}/gasto/cadastrar`, dados, {\r\n      params: { idUsuario } // ID como query parameter\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro ao cadastrar gasto:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deletarGasto = async (id) => {\r\n  try {\r\n    return await axios.delete(`${API_URL}/gasto/deletar`, {\r\n      params: { id } // ID como query parameter\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro ao deletar gasto:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Gera um novo plano financeiro para o usuário.\r\n * O valor para poupar é opcional e enviado como um parâmetro de query.\r\n * @param {number} idUsuario O ID do usuário.\r\n * @param {number} [valorPraPoupar] O valor opcional que o usuário deseja poupar por mês.\r\n */\r\nconst gerarPlano = async (idUsuario, valorPraPoupar = null) => {\r\n  try {\r\n    // Constrói a URL base com idUsuario como query parameter.\r\n    let url = `${API_URL}/plano?idUsuario=${idUsuario}`;\r\n\r\n    // Se valorPraPoupar for fornecido (não nulo/indefinido) e for um número válido,\r\n    // adicione-o como um parâmetro de query adicional na URL.\r\n    // parseFloat garante que o valor é um número, e encodeURIComponent o codifica para a URL.\r\n    if (valorPraPoupar !== null && valorPraPoupar !== undefined && !isNaN(parseFloat(valorPraPoupar))) {\r\n      url += `&valorPraPoupar=${encodeURIComponent(parseFloat(valorPraPoupar))}`;\r\n    }\r\n\r\n    // Realiza a requisição POST para a URL construída.\r\n    // O segundo argumento de axios.post é o corpo da requisição (body),\r\n    // que é null aqui, pois os parâmetros são enviados na URL (query string),\r\n    // conforme o @RequestParam do seu backend.\r\n    const response = await axios.post(url, null); \r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Erro ao gerar plano:\", error);\r\n    throw error; // Propagar o erro para o componente para tratamento de UI\r\n  }\r\n};\r\n\r\nconst buscarPlanosPorUsuario = async (idUsuario) => {\r\n  try {\r\n    return await axios.get(`${API_URL}/plano/usuario`, {\r\n      params: { idUsuario }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar planos por usuário:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst authService = {\r\n  login,\r\n  register,\r\n  getUserById,\r\n  alterarSenha,\r\n  delet,\r\n  alterarDadosUsuario,\r\n  alterarEmail,\r\n  buscarLancamentosPorUsuario,\r\n  alterarGasto,\r\n  cadastrarGasto,\r\n  deletarGasto,\r\n  gerarPlano,\r\n  buscarPlanosPorUsuario\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}