{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\Front\\\\myFinance\\\\src\\\\pages\\\\Planos.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Layout from \"../components/Layout\";\nimport { Chart } from \"react-google-charts\";\nimport authService from \"../services/authService\";\nimport \"../assets/Planos.css\";\nimport VEcononoPopup from \"../components/VEcononoPopup\";\n\n// Componente principal para a página de Planos Financeiros\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Planos = () => {\n  _s();\n  var _dadosPlano$ajustes, _dadosPlano$riscos;\n  // Estados para gerenciar os dados do plano, carregamento, erros, popups e navegação\n  const [dadosPlano, setDadosPlano] = useState(null); // Armazena os dados do plano financeiro atual\n  const [loading, setLoading] = useState(true); // Indica se a página está carregando dados\n  const [error, setError] = useState(null); // Armazena mensagens de erro\n  const [showValueInputPopup, setShowValueInputPopup] = useState(false); // Controla a visibilidade do popup de entrada de valor\n  const [todosOsPlanos, setTodosOsPlanos] = useState([]); // Armazena todos os planos financeiros do usuário\n  const [currentPlanIndex, setCurrentPlanIndex] = useState(0); // Índice do plano atualmente exibido\n\n  // Mapeamento de cores para cada categoria de despesa, usado nos gráficos\n  const categoriaCores = {\n    NECESSIDADES: '#007bff',\n    // Azul\n    DESEJOS: '#dc3545',\n    // Vermelho\n    INVESTIMENTO_E_POUPANCA: '#28a745',\n    // Verde\n    ECONOMIA_PLANEJADA: '#8A2BE2' // Roxo\n  };\n\n  // Função para formatar um valor numérico para o formato de moeda BRL (Real Brasileiro)\n  const formatarValor = valor => {\n    return valor.toLocaleString(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\"\n    });\n  };\n\n  // Mapeamento de nomes de categorias para exibição amigável ao usuário\n  const categoriaMapeada = {\n    NECESSIDADES: \"Necessidades\",\n    DESEJOS: \"Desejos\",\n    INVESTIMENTO_E_POUPANCA: \"Investimento/Poupança\",\n    ECONOMIA_PLANEJADA: \"Economia Planejada\"\n  };\n\n  // Função para preparar os dados para os gráficos do Google Charts\n  const prepararDadosParaGrafico = (dataArray, titulo) => {\n    // Agrupa os valores por categoria\n    const categoriasAgrupadas = dataArray.reduce((acc, item) => {\n      acc[item.categoria] = (acc[item.categoria] || 0) + item.valor;\n      return acc;\n    }, {});\n\n    // Define os cabeçalhos das colunas para o gráfico (Categoria, Título, Tooltip HTML)\n    const dados = [[\"Categoria\", titulo, {\n      type: 'string',\n      role: 'tooltip',\n      p: {\n        html: true\n      }\n    }]];\n    const coresOrdenadas = [];\n    const seriesOptions = {};\n\n    // Obtém as chaves das categorias em ordem definida\n    const orderedCategories = Object.keys(categoriaCores);\n    let seriesIndex = 0;\n\n    // Itera sobre as categorias ordenadas e adiciona os dados ao array para o gráfico\n    orderedCategories.forEach(categoriaKey => {\n      if (categoriasAgrupadas.hasOwnProperty(categoriaKey)) {\n        const valorNumerico = categoriasAgrupadas[categoriaKey];\n        const valorFormatado = formatarValor(valorNumerico);\n        // Cria o HTML para o tooltip personalizado do gráfico\n        const tooltipHtml = `<div style=\"padding: 10px; border: 1px solid #ccc; background-color: #fff; font-size: 14px;\">` + `<strong>${categoriaMapeada[categoriaKey]}</strong>: ${valorFormatado}` + `</div>`;\n        dados.push([categoriaMapeada[categoriaKey], valorNumerico, tooltipHtml]);\n        coresOrdenadas.push(categoriaCores[categoriaKey]);\n        seriesOptions[seriesIndex] = {\n          color: categoriaCores[categoriaKey]\n        };\n        seriesIndex++;\n      }\n    });\n\n    // Adiciona quaisquer outras categorias não predefinidas com uma cor padrão\n    for (const categoriaKey in categoriasAgrupadas) {\n      if (!orderedCategories.includes(categoriaKey)) {\n        const valorNumerico = categoriasAgrupadas[categoriaKey];\n        const valorFormatado = formatarValor(valorNumerico);\n        const tooltipHtml = `<div style=\"padding: 10px; border: 1px solid #ccc; background-color: #fff; font-size: 14px;\">` + `<strong>${categoriaMapeada[categoriaKey] || categoriaKey}</strong>: ${valorFormatado}` + `</div>`;\n        dados.push([categoriaMapeada[categoriaKey] || categoriaKey, valorNumerico, tooltipHtml]);\n        coresOrdenadas.push('#cccccc'); // Cor padrão para categorias não mapeadas\n        seriesOptions[seriesIndex] = {\n          color: '#cccccc'\n        };\n        seriesIndex++;\n      }\n    }\n    return {\n      data: dados,\n      colors: coresOrdenadas,\n      series: seriesOptions\n    };\n  };\n\n  // Função assíncrona para carregar os planos financeiros do usuário\n  const carregarPlanosDoUsuario = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n      const response = await authService.buscarPlanosPorUsuario(usuario.id);\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        // Filtra planos pelo ID do usuário e ordena pelo ID (mais recente primeiro)\n        const planosDoUsuario = response.data.filter(plano => plano.idUsuario === usuario.id).sort((a, b) => b.id - a.id);\n\n        // Pega apenas os 3 últimos planos\n        const ultimos3Planos = planosDoUsuario.slice(0, 3);\n        setTodosOsPlanos(ultimos3Planos);\n\n        // Define o primeiro plano como o plano atual a ser exibido\n        if (ultimos3Planos.length > 0) {\n          setDadosPlano(ultimos3Planos[0]);\n          setCurrentPlanIndex(0);\n        } else {\n          setDadosPlano(null);\n          setCurrentPlanIndex(0);\n        }\n      } else {\n        setDadosPlano(null);\n        setTodosOsPlanos([]);\n        setCurrentPlanIndex(0);\n      }\n    } catch (err) {\n      console.error(\"Erro ao carregar os planos:\", err);\n      // Trata diferentes tipos de erros e define a mensagem de erro\n      if (err.response && err.response.data && err.response.data.message) {\n        setError(`Erro ao carregar planos: ${err.response.data.message}`);\n      } else if (err.message) {\n        setError(err.message);\n      } else {\n        setError(\"Não foi possível carregar os planos financeiros. Verifique sua conexão.\");\n      }\n      setDadosPlano(null);\n      setTodosOsPlanos([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []); // Dependência vazia, pois não depende de nenhum valor externo reativo\n\n  // Função assíncrona para gerar um novo plano financeiro padrão\n  const gerarNovoPlano = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n      const response = await authService.gerarPlano(usuario.id);\n\n      // Se o plano for gerado com sucesso, recarrega os planos do usuário\n      if (response.data && response.data.id) {\n        carregarPlanosDoUsuario();\n      } else {\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\n      }\n    } catch (err) {\n      console.error(\"Erro ao gerar novo plano padrão:\", err);\n      let errorMessage = \"Não foi possível gerar um novo plano financeiro. Tente novamente.\";\n      // Trata diferentes tipos de erros e define a mensagem de erro\n      if (err.response) {\n        if (err.response.data && err.response.data.message) {\n          errorMessage = err.response.data.message;\n        } else if (err.response.data) {\n          errorMessage = JSON.stringify(err.response.data);\n        } else {\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      setError(errorMessage);\n      setDadosPlano(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [carregarPlanosDoUsuario]); // Depende da função carregarPlanosDoUsuario\n\n  // Função assíncrona para gerar um novo plano financeiro com base em um valor de economia mensal\n  const gerarNovoPlanoComValor = useCallback(async valor => {\n    setLoading(true);\n    setError(null);\n    setShowValueInputPopup(false); // Fecha o popup após a submissão\n    try {\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\n      if (!usuario || !usuario.id) {\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\n      }\n      const response = await authService.gerarPlano(usuario.id, valor);\n\n      // Se o plano for gerado com sucesso, recarrega os planos do usuário\n      if (response.data && response.data.id) {\n        carregarPlanosDoUsuario();\n      } else {\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\n      }\n    } catch (err) {\n      console.error(\"Erro ao gerar novo plano com valor:\", err);\n      let errorMessage = \"Ocorreu um erro ao gerar o plano com valor. Tente novamente.\";\n      // Trata diferentes tipos de erros e define a mensagem de erro\n      if (err.response) {\n        if (err.response.data && err.response.data.message) {\n          errorMessage = err.response.data.message;\n        } else if (err.response.data) {\n          errorMessage = JSON.stringify(err.response.data);\n        } else {\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      setError(errorMessage);\n      setDadosPlano(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [carregarPlanosDoUsuario]); // Depende da função carregarPlanosDoUsuario\n\n  // Lida com a navegação para o plano anterior na lista\n  const handlePreviousPlan = () => {\n    const newIndex = currentPlanIndex + 1;\n    if (newIndex < todosOsPlanos.length) {\n      setCurrentPlanIndex(newIndex);\n      setDadosPlano(todosOsPlanos[newIndex]);\n    }\n  };\n\n  // Lida com a navegação para o próximo plano na lista\n  const handleNextPlan = () => {\n    const newIndex = currentPlanIndex - 1;\n    if (newIndex >= 0) {\n      setCurrentPlanIndex(newIndex);\n      setDadosPlano(todosOsPlanos[newIndex]);\n    }\n  };\n\n  // Efeito colateral para carregar os planos do usuário quando o componente é montado\n  useEffect(() => {\n    carregarPlanosDoUsuario();\n  }, [carregarPlanosDoUsuario]); // Garante que a função seja chamada quando carregarPlanosDoUsuario mudar (o que é improvável devido ao useCallback)\n\n  // Verifica se há múltiplos planos para habilitar a navegação\n  const hasMultiplePlans = todosOsPlanos.length > 1;\n\n  // Opções globais de loader para Google Charts com localização em pt-BR\n  const chartLoaders = {\n    charts: [\"PieChart\", \"BarChart\"],\n    language: \"pt-BR\" // Define o idioma para formatação numérica\n  };\n\n  // Renderização do componente\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planos-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"planos-header\",\n        children: \"Seu Plano Financeiro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"planos-description\",\n        children: \"Aqui voc\\xEA pode visualizar seu plano financeiro atual. Ele \\xE9 gerado com base nos seus lan\\xE7amentos e oferece recomenda\\xE7\\xF5es de ajustes e identifica \\xE1reas de risco em suas despesas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-actions-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-action-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"action-description\",\n            children: \"Gere um plano com base nos seus gastos atuais para identificar \\xE1reas de risco e oportunidades de ajuste, ajudando voc\\xEA a sair do vermelho e melhorar sua sa\\xFAde financeira geral.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"gerar-plano-button\",\n            onClick: gerarNovoPlano,\n            disabled: loading // Desabilita o botão durante o carregamento\n            ,\n            children: loading ? \"Gerando Plano...\" : \"Gerar Plano Padrão\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-action-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"action-description\",\n            children: \"Quer planejar sua economia mensal? Clique no bot\\xE3o abaixo e informe o valor que voc\\xEA deseja economizar por m\\xEAs. A ferramenta ir\\xE1 te ajudar a visualizar como alcan\\xE7ar essa meta!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"gerar-plano-button\",\n            onClick: () => setShowValueInputPopup(true) // Abre o popup\n            ,\n            disabled: loading // Desabilita o botão durante o carregamento\n            ,\n            children: \"Gerar Plano com Valor de Economia Mensal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message loading-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Carregando plano financeiro...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), !loading && !error && dadosPlano && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Entenda seu plano:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this), \"Ajustes Recomendados: Representam oportunidades para otimizar seus gastos. Considere direcionar esses valores para suas economias ou investimentos, visando alcan\\xE7ar seus objetivos financeiros mais rapidamente.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this), \"\\xC1reas de Risco: Indicam despesas que foram identificadas como potencialmente altas. \\xC9 crucial revisar esses itens para identificar onde voc\\xEA pode economizar e evitar que eles comprometam sua sa\\xFAde financeira.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"disclaimer-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-disclaimer\",\n              children: \"Aviso:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this), \" Esta ferramenta \\xE9 um aux\\xEDlio para seu planejamento financeiro e n\\xE3o substitui o aconselhamento de um profissional. As proje\\xE7\\xF5es s\\xE3o baseadas nos dados fornecidos e n\\xE3o garantem resultados futuros.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), dadosPlano.ajustes && dadosPlano.ajustes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Ajustes Recomendados\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Estes s\\xE3o os valores e categorias onde voc\\xEA pode ajustar seus gastos para melhorar sua sa\\xFAde financeira. Ao reduzir esses gastos, voc\\xEA pode direcionar mais recursos para suas metas financeiras.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"planos-content-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Chart, {\n                chartType: \"PieChart\",\n                width: \"100%\",\n                height: \"100%\",\n                data: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").data,\n                loader: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Carregando Gr\\xE1fico...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 31\n                }, this),\n                options: {\n                  title: \"Distribuição dos Ajustes Recomendados\",\n                  pieHole: 0.4,\n                  is3D: false,\n                  legend: {\n                    position: \"bottom\",\n                    alignment: \"center\"\n                  },\n                  tooltip: {\n                    isHtml: true,\n                    trigger: 'focus'\n                  },\n                  // Tooltip HTML ativado\n                  backgroundColor: 'transparent',\n                  chartArea: {\n                    left: \"5%\",\n                    top: \"10%\",\n                    width: \"90%\",\n                    height: \"70%\"\n                  },\n                  colors: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").colors\n                },\n                loaders: chartLoaders // Aplica opções de loader globais\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Detalhes dos Ajustes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: dadosPlano.ajustes.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [categoriaMapeada[item.categoria] || item.categoria, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 27\n                  }, this), \" \", item.subcategoria, \" - \", formatarValor(item.valor)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }, this), dadosPlano.riscos && dadosPlano.riscos.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\xC1reas de Risco\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Estes gastos foram identificados como potencialmente altos. Recomendamos que voc\\xEA os revise para encontrar oportunidades de economia e evitar desequil\\xEDbrios em suas finan\\xE7as.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"planos-content-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-wrapper\",\n              children: /*#__PURE__*/_jsxDEV(Chart, {\n                chartType: \"BarChart\",\n                width: \"100%\",\n                height: \"100%\",\n                data: prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\").data,\n                loader: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Carregando Gr\\xE1fico...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 31\n                }, this),\n                options: {\n                  title: \"Valores por Categoria de Risco\",\n                  legend: {\n                    position: \"none\"\n                  },\n                  bars: \"horizontal\",\n                  hAxis: {\n                    // Configuração do eixo horizontal\n                    format: \"currency\",\n                    // Formato de moeda padrão da localização\n                    gridlines: {\n                      count: 0\n                    },\n                    // Remove as linhas de grade para um visual mais limpo\n                    textStyle: {\n                      color: '#555',\n                      fontName: 'Inter'\n                    },\n                    // Estilo do texto\n                    minValue: 0,\n                    // Garante que o eixo comece em 0\n                    formatOptions: {\n                      // Opções de formatação específicas para o formato monetário\n                      prefix: 'R$',\n                      decimalPlaces: 2,\n                      groupingSymbol: '.',\n                      decimalSymbol: ','\n                    }\n                  },\n                  vAxis: {\n                    // Configuração do eixo vertical\n                    textStyle: {\n                      fontSize: 12\n                    } // Ajusta o tamanho da fonte do eixo Y\n                  },\n                  tooltip: {\n                    isHtml: true,\n                    trigger: 'focus'\n                  },\n                  // Tooltip HTML ativado\n                  backgroundColor: 'transparent',\n                  chartArea: {\n                    left: \"15%\",\n                    top: \"10%\",\n                    width: \"70%\",\n                    height: \"70%\"\n                  },\n                  colors: ['#dc3545'] // Cor das barras (vermelho para risco)\n                },\n                loaders: chartLoaders // Aplica opções de loader globais\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Detalhes dos Riscos:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: dadosPlano.riscos.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [categoriaMapeada[item.categoria] || item.categoria, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 432,\n                    columnNumber: 27\n                  }, this), \" \", item.subcategoria, \" - \", formatarValor(item.valor)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 15\n        }, this), !(dadosPlano !== null && dadosPlano !== void 0 && (_dadosPlano$ajustes = dadosPlano.ajustes) !== null && _dadosPlano$ajustes !== void 0 && _dadosPlano$ajustes.length) && !(dadosPlano !== null && dadosPlano !== void 0 && (_dadosPlano$riscos = dadosPlano.riscos) !== null && _dadosPlano$riscos !== void 0 && _dadosPlano$riscos.length) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planos-message no-data-found-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O plano foi gerado, mas n\\xE3o foram encontrados ajustes ou riscos para o seu perfil financeiro atual. Parece que suas finan\\xE7as est\\xE3o em ordem!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 15\n        }, this), dadosPlano.dataAlteracao && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"data-alteracao\",\n          children: [\"\\xDAltima atualiza\\xE7\\xE3o do plano: \", dadosPlano.dataAlteracao]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 15\n        }, this), hasMultiplePlans && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan-navigation-pills\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNextPlan,\n            disabled: currentPlanIndex === 0 || loading // Desabilita se for o primeiro plano ou estiver carregando\n            ,\n            className: `nav-pill-button ${currentPlanIndex === 0 ? 'disabled-pill' : ''}`,\n            children: \"Anterior\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"plan-index-display\",\n            children: [\"Plano \", currentPlanIndex + 1, \" de \", todosOsPlanos.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePreviousPlan,\n            disabled: currentPlanIndex === todosOsPlanos.length - 1 || loading // Desabilita se for o último plano ou estiver carregando\n            ,\n            className: `nav-pill-button ${currentPlanIndex === todosOsPlanos.length - 1 ? 'disabled-pill' : ''}`,\n            children: \"Proximo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), !loading && !error && !dadosPlano && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planos-message initial-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Voc\\xEA ainda n\\xE3o possui um plano financeiro salvo ou ele est\\xE1 vazio.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this), \"Clique em \\\"Gerar Novo Plano\\\" para analisar seus gastos e obter recomenda\\xE7\\xF5es personalizadas.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VEcononoPopup, {\n        isOpen: showValueInputPopup,\n        onClose: () => setShowValueInputPopup(false),\n        onSubmit: gerarNovoPlanoComValor,\n        isLoading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(Planos, \"eEC7OlQW0357M/FAuh74sbOprJc=\");\n_c = Planos;\nexport default Planos;\nvar _c;\n$RefreshReg$(_c, \"Planos\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Layout","Chart","authService","VEcononoPopup","jsxDEV","_jsxDEV","Fragment","_Fragment","Planos","_s","_dadosPlano$ajustes","_dadosPlano$riscos","dadosPlano","setDadosPlano","loading","setLoading","error","setError","showValueInputPopup","setShowValueInputPopup","todosOsPlanos","setTodosOsPlanos","currentPlanIndex","setCurrentPlanIndex","categoriaCores","NECESSIDADES","DESEJOS","INVESTIMENTO_E_POUPANCA","ECONOMIA_PLANEJADA","formatarValor","valor","toLocaleString","style","currency","categoriaMapeada","prepararDadosParaGrafico","dataArray","titulo","categoriasAgrupadas","reduce","acc","item","categoria","dados","type","role","p","html","coresOrdenadas","seriesOptions","orderedCategories","Object","keys","seriesIndex","forEach","categoriaKey","hasOwnProperty","valorNumerico","valorFormatado","tooltipHtml","push","color","includes","data","colors","series","carregarPlanosDoUsuario","usuario","JSON","parse","localStorage","getItem","id","Error","response","buscarPlanosPorUsuario","Array","isArray","length","planosDoUsuario","filter","plano","idUsuario","sort","a","b","ultimos3Planos","slice","err","console","message","gerarNovoPlano","gerarPlano","errorMessage","stringify","status","statusText","gerarNovoPlanoComValor","handlePreviousPlan","newIndex","handleNextPlan","hasMultiplePlans","chartLoaders","charts","language","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ajustes","chartType","width","height","loader","options","title","pieHole","is3D","legend","position","alignment","tooltip","isHtml","trigger","backgroundColor","chartArea","left","top","loaders","map","index","subcategoria","riscos","bars","hAxis","format","gridlines","count","textStyle","fontName","minValue","formatOptions","prefix","decimalPlaces","groupingSymbol","decimalSymbol","vAxis","fontSize","dataAlteracao","isOpen","onClose","onSubmit","isLoading","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/pages/Planos.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport Layout from \"../components/Layout\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport authService from \"../services/authService\";\r\nimport \"../assets/Planos.css\";\r\nimport VEcononoPopup from \"../components/VEcononoPopup\";\r\n\r\n// Componente principal para a página de Planos Financeiros\r\nconst Planos = () => {\r\n  // Estados para gerenciar os dados do plano, carregamento, erros, popups e navegação\r\n  const [dadosPlano, setDadosPlano] = useState(null); // Armazena os dados do plano financeiro atual\r\n  const [loading, setLoading] = useState(true); // Indica se a página está carregando dados\r\n  const [error, setError] = useState(null); // Armazena mensagens de erro\r\n  const [showValueInputPopup, setShowValueInputPopup] = useState(false); // Controla a visibilidade do popup de entrada de valor\r\n  const [todosOsPlanos, setTodosOsPlanos] = useState([]); // Armazena todos os planos financeiros do usuário\r\n  const [currentPlanIndex, setCurrentPlanIndex] = useState(0); // Índice do plano atualmente exibido\r\n\r\n  // Mapeamento de cores para cada categoria de despesa, usado nos gráficos\r\n  const categoriaCores = {\r\n    NECESSIDADES: '#007bff',           // Azul\r\n    DESEJOS: '#dc3545',               // Vermelho\r\n    INVESTIMENTO_E_POUPANCA: '#28a745', // Verde\r\n    ECONOMIA_PLANEJADA: '#8A2BE2'      // Roxo\r\n  };\r\n\r\n  // Função para formatar um valor numérico para o formato de moeda BRL (Real Brasileiro)\r\n  const formatarValor = (valor) => {\r\n    return valor.toLocaleString(\"pt-BR\", { style: \"currency\", currency: \"BRL\" });\r\n  };\r\n\r\n  // Mapeamento de nomes de categorias para exibição amigável ao usuário\r\n  const categoriaMapeada = {\r\n    NECESSIDADES: \"Necessidades\",\r\n    DESEJOS: \"Desejos\",\r\n    INVESTIMENTO_E_POUPANCA: \"Investimento/Poupança\",\r\n    ECONOMIA_PLANEJADA: \"Economia Planejada\"\r\n  };\r\n\r\n  // Função para preparar os dados para os gráficos do Google Charts\r\n  const prepararDadosParaGrafico = (dataArray, titulo) => {\r\n    // Agrupa os valores por categoria\r\n    const categoriasAgrupadas = dataArray.reduce((acc, item) => {\r\n      acc[item.categoria] = (acc[item.categoria] || 0) + item.valor;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define os cabeçalhos das colunas para o gráfico (Categoria, Título, Tooltip HTML)\r\n    const dados = [[\"Categoria\", titulo, { type: 'string', role: 'tooltip', p: { html: true } }]];\r\n    const coresOrdenadas = [];\r\n    const seriesOptions = {};\r\n\r\n    // Obtém as chaves das categorias em ordem definida\r\n    const orderedCategories = Object.keys(categoriaCores);\r\n    let seriesIndex = 0;\r\n\r\n    // Itera sobre as categorias ordenadas e adiciona os dados ao array para o gráfico\r\n    orderedCategories.forEach(categoriaKey => {\r\n      if (categoriasAgrupadas.hasOwnProperty(categoriaKey)) {\r\n        const valorNumerico = categoriasAgrupadas[categoriaKey];\r\n        const valorFormatado = formatarValor(valorNumerico);\r\n        // Cria o HTML para o tooltip personalizado do gráfico\r\n        const tooltipHtml = `<div style=\"padding: 10px; border: 1px solid #ccc; background-color: #fff; font-size: 14px;\">` +\r\n                             `<strong>${categoriaMapeada[categoriaKey]}</strong>: ${valorFormatado}` +\r\n                             `</div>`;\r\n        dados.push([categoriaMapeada[categoriaKey], valorNumerico, tooltipHtml]);\r\n        coresOrdenadas.push(categoriaCores[categoriaKey]);\r\n        seriesOptions[seriesIndex] = { color: categoriaCores[categoriaKey] };\r\n        seriesIndex++;\r\n      }\r\n    });\r\n\r\n    // Adiciona quaisquer outras categorias não predefinidas com uma cor padrão\r\n    for (const categoriaKey in categoriasAgrupadas) {\r\n      if (!orderedCategories.includes(categoriaKey)) {\r\n        const valorNumerico = categoriasAgrupadas[categoriaKey];\r\n        const valorFormatado = formatarValor(valorNumerico);\r\n        const tooltipHtml = `<div style=\"padding: 10px; border: 1px solid #ccc; background-color: #fff; font-size: 14px;\">` +\r\n                             `<strong>${categoriaMapeada[categoriaKey] || categoriaKey}</strong>: ${valorFormatado}` +\r\n                             `</div>`;\r\n        dados.push([categoriaMapeada[categoriaKey] || categoriaKey, valorNumerico, tooltipHtml]);\r\n        coresOrdenadas.push('#cccccc'); // Cor padrão para categorias não mapeadas\r\n        seriesOptions[seriesIndex] = { color: '#cccccc' };\r\n        seriesIndex++;\r\n      }\r\n    }\r\n    \r\n    return { data: dados, colors: coresOrdenadas, series: seriesOptions };\r\n  };\r\n\r\n  // Função assíncrona para carregar os planos financeiros do usuário\r\n  const carregarPlanosDoUsuario = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      const response = await authService.buscarPlanosPorUsuario(usuario.id);\r\n\r\n      if (Array.isArray(response.data) && response.data.length > 0) {\r\n        // Filtra planos pelo ID do usuário e ordena pelo ID (mais recente primeiro)\r\n        const planosDoUsuario = response.data\r\n          .filter((plano) => plano.idUsuario === usuario.id)\r\n          .sort((a, b) => b.id - a.id);\r\n\r\n        // Pega apenas os 3 últimos planos\r\n        const ultimos3Planos = planosDoUsuario.slice(0, 3);\r\n        setTodosOsPlanos(ultimos3Planos);\r\n\r\n        // Define o primeiro plano como o plano atual a ser exibido\r\n        if (ultimos3Planos.length > 0) {\r\n          setDadosPlano(ultimos3Planos[0]);\r\n          setCurrentPlanIndex(0);\r\n        } else {\r\n          setDadosPlano(null);\r\n          setCurrentPlanIndex(0);\r\n        }\r\n      } else {\r\n        setDadosPlano(null);\r\n        setTodosOsPlanos([]);\r\n        setCurrentPlanIndex(0);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao carregar os planos:\", err);\r\n      // Trata diferentes tipos de erros e define a mensagem de erro\r\n      if (err.response && err.response.data && err.response.data.message) {\r\n        setError(`Erro ao carregar planos: ${err.response.data.message}`);\r\n      } else if (err.message) {\r\n        setError(err.message);\r\n      } else {\r\n        setError(\"Não foi possível carregar os planos financeiros. Verifique sua conexão.\");\r\n      }\r\n      setDadosPlano(null);\r\n      setTodosOsPlanos([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []); // Dependência vazia, pois não depende de nenhum valor externo reativo\r\n\r\n  // Função assíncrona para gerar um novo plano financeiro padrão\r\n  const gerarNovoPlano = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      const response = await authService.gerarPlano(usuario.id);\r\n\r\n      // Se o plano for gerado com sucesso, recarrega os planos do usuário\r\n      if (response.data && response.data.id) {\r\n        carregarPlanosDoUsuario();\r\n      } else {\r\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao gerar novo plano padrão:\", err);\r\n      let errorMessage = \"Não foi possível gerar um novo plano financeiro. Tente novamente.\";\r\n      // Trata diferentes tipos de erros e define a mensagem de erro\r\n      if (err.response) {\r\n        if (err.response.data && err.response.data.message) {\r\n          errorMessage = err.response.data.message;\r\n        } else if (err.response.data) {\r\n          errorMessage = JSON.stringify(err.response.data);\r\n        } else {\r\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\r\n        }\r\n      } else if (err.message) {\r\n        errorMessage = err.message;\r\n      }\r\n      setError(errorMessage);\r\n      setDadosPlano(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [carregarPlanosDoUsuario]); // Depende da função carregarPlanosDoUsuario\r\n\r\n  // Função assíncrona para gerar um novo plano financeiro com base em um valor de economia mensal\r\n  const gerarNovoPlanoComValor = useCallback(async (valor) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setShowValueInputPopup(false); // Fecha o popup após a submissão\r\n    try {\r\n      const usuario = JSON.parse(localStorage.getItem(\"usuario\"));\r\n      if (!usuario || !usuario.id) {\r\n        throw new Error(\"ID do usuário não encontrado. Faça login novamente.\");\r\n      }\r\n\r\n      const response = await authService.gerarPlano(usuario.id, valor);\r\n\r\n      // Se o plano for gerado com sucesso, recarrega os planos do usuário\r\n      if (response.data && response.data.id) {\r\n        carregarPlanosDoUsuario();\r\n      } else {\r\n        setError(\"O plano foi gerado, mas não pudemos exibi-lo. Tente recarregar a página.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro ao gerar novo plano com valor:\", err);\r\n      let errorMessage = \"Ocorreu um erro ao gerar o plano com valor. Tente novamente.\";\r\n      // Trata diferentes tipos de erros e define a mensagem de erro\r\n      if (err.response) {\r\n        if (err.response.data && err.response.data.message) {\r\n          errorMessage = err.response.data.message;\r\n        } else if (err.response.data) {\r\n          errorMessage = JSON.stringify(err.response.data);\r\n        } else {\r\n          errorMessage = `Erro do servidor: ${err.response.status} ${err.response.statusText}`;\r\n        }\r\n      } else if (err.message) {\r\n        errorMessage = err.message;\r\n      }\r\n      setError(errorMessage);\r\n      setDadosPlano(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [carregarPlanosDoUsuario]); // Depende da função carregarPlanosDoUsuario\r\n\r\n  // Lida com a navegação para o plano anterior na lista\r\n  const handlePreviousPlan = () => {\r\n    const newIndex = currentPlanIndex + 1;\r\n    if (newIndex < todosOsPlanos.length) {\r\n      setCurrentPlanIndex(newIndex);\r\n      setDadosPlano(todosOsPlanos[newIndex]);\r\n    }\r\n  };\r\n\r\n  // Lida com a navegação para o próximo plano na lista\r\n  const handleNextPlan = () => {\r\n    const newIndex = currentPlanIndex - 1;\r\n    if (newIndex >= 0) {\r\n      setCurrentPlanIndex(newIndex);\r\n      setDadosPlano(todosOsPlanos[newIndex]);\r\n    }\r\n  };\r\n\r\n  // Efeito colateral para carregar os planos do usuário quando o componente é montado\r\n  useEffect(() => {\r\n    carregarPlanosDoUsuario();\r\n  }, [carregarPlanosDoUsuario]); // Garante que a função seja chamada quando carregarPlanosDoUsuario mudar (o que é improvável devido ao useCallback)\r\n\r\n  // Verifica se há múltiplos planos para habilitar a navegação\r\n  const hasMultiplePlans = todosOsPlanos.length > 1;\r\n\r\n  // Opções globais de loader para Google Charts com localização em pt-BR\r\n  const chartLoaders = {\r\n    charts: [\"PieChart\", \"BarChart\"],\r\n    language: \"pt-BR\", // Define o idioma para formatação numérica\r\n  };\r\n\r\n  // Renderização do componente\r\n  return (\r\n    <Layout>\r\n      <div className=\"planos-container\">\r\n        <h1 className=\"planos-header\">Seu Plano Financeiro</h1>\r\n        <p className=\"planos-description\">\r\n          Aqui você pode visualizar seu plano financeiro atual. Ele é gerado com base nos seus lançamentos\r\n          e oferece recomendações de ajustes e identifica áreas de risco em suas despesas.\r\n        </p>\r\n\r\n        {/* Grupo de ações para gerar planos */}\r\n        <div className=\"planos-actions-group\">\r\n          {/* Card para gerar plano padrão */}\r\n          <div className=\"plan-action-card\">\r\n            <p className=\"action-description\">\r\n              Gere um plano com base nos seus gastos atuais para identificar áreas de risco e oportunidades de ajuste,\r\n              ajudando você a sair do vermelho e melhorar sua saúde financeira geral.\r\n            </p>\r\n            <button\r\n              className=\"gerar-plano-button\"\r\n              onClick={gerarNovoPlano}\r\n              disabled={loading} // Desabilita o botão durante o carregamento\r\n            >\r\n              {loading ? \"Gerando Plano...\" : \"Gerar Plano Padrão\"}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Card para gerar plano com valor de economia mensal */}\r\n          <div className=\"plan-action-card\">\r\n            <p className=\"action-description\">\r\n              Quer planejar sua economia mensal? Clique no botão abaixo e informe\r\n              o valor que você deseja economizar por mês. A ferramenta irá te ajudar a visualizar\r\n              como alcançar essa meta!\r\n            </p>\r\n            <button\r\n              className=\"gerar-plano-button\"\r\n              onClick={() => setShowValueInputPopup(true)} // Abre o popup\r\n              disabled={loading} // Desabilita o botão durante o carregamento\r\n            >\r\n              Gerar Plano com Valor de Economia Mensal\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mensagens de status (carregamento, erro) */}\r\n        {loading && (\r\n          <div className=\"planos-message loading-message\">\r\n            <p>Carregando plano financeiro...</p>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <div className=\"planos-message error-message\">\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Se não estiver carregando, sem erro e com dados do plano */}\r\n        {!loading && !error && dadosPlano && (\r\n          <>\r\n            {/* Seção de resumo e avisos do plano */}\r\n            <div className=\"planos-summary\">\r\n              <p>\r\n                Entenda seu plano:\r\n                <br></br>\r\n                <br />\r\n                Ajustes Recomendados: Representam oportunidades para otimizar seus gastos.\r\n                Considere direcionar esses valores para suas economias ou investimentos,\r\n                visando alcançar seus objetivos financeiros mais rapidamente.\r\n                <br></br>\r\n                <br />\r\n                Áreas de Risco: Indicam despesas que foram identificadas como potencialmente altas.\r\n                É crucial revisar esses itens para identificar onde você pode economizar\r\n                e evitar que eles comprometam sua saúde financeira.\r\n              </p>\r\n              <p className=\"disclaimer-text\">\r\n                <span className=\"bold-disclaimer\">Aviso:</span> Esta ferramenta é um auxílio para seu planejamento financeiro e não\r\n                substitui o aconselhamento de um profissional. As projeções são baseadas nos dados fornecidos\r\n                e não garantem resultados futuros.\r\n              </p>\r\n            </div>\r\n\r\n            {/* Seção de Ajustes Recomendados (se houver dados) */}\r\n            {dadosPlano.ajustes && dadosPlano.ajustes.length > 0 && (\r\n              <div className=\"planos-section\">\r\n                <h2>Ajustes Recomendados</h2>\r\n                <p>\r\n                  Estes são os valores e categorias onde você pode ajustar seus gastos para melhorar sua saúde financeira.\r\n                  Ao reduzir esses gastos, você pode direcionar mais recursos para suas metas financeiras.\r\n                </p>\r\n                <div className=\"planos-content-grid\">\r\n                  <div className=\"chart-wrapper\">\r\n                    {/* Gráfico de Pizza para Ajustes Recomendados */}\r\n                    <Chart\r\n                      chartType=\"PieChart\"\r\n                      width=\"100%\"\r\n                      height=\"100%\"\r\n                      data={prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").data}\r\n                      loader={<div>Carregando Gráfico...</div>}\r\n                      options={{\r\n                        title: \"Distribuição dos Ajustes Recomendados\",\r\n                        pieHole: 0.4,\r\n                        is3D: false,\r\n                        legend: { position: \"bottom\", alignment: \"center\" },\r\n                        tooltip: { isHtml: true, trigger: 'focus' }, // Tooltip HTML ativado\r\n                        backgroundColor: 'transparent',\r\n                        chartArea: { left: \"5%\", top: \"10%\", width: \"90%\", height: \"70%\" },\r\n                        colors: prepararDadosParaGrafico(dadosPlano.ajustes, \"Valor Ajustado\").colors\r\n                      }}\r\n                      loaders={chartLoaders} // Aplica opções de loader globais\r\n                    />\r\n                  </div>\r\n                  {/* Lista de detalhes dos ajustes */}\r\n                  <div className=\"list-wrapper\">\r\n                    <h3>Detalhes dos Ajustes:</h3>\r\n                    <ul>\r\n                      {dadosPlano.ajustes.map((item, index) => (\r\n                        <li key={index}>\r\n                          <strong>{categoriaMapeada[item.categoria] || item.categoria}:</strong> {item.subcategoria} - {formatarValor(item.valor)}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Seção de Áreas de Risco (se houver dados) */}\r\n            {dadosPlano.riscos && dadosPlano.riscos.length > 0 && (\r\n              <div className=\"planos-section\">\r\n                <h2>Áreas de Risco</h2>\r\n                <p>\r\n                  Estes gastos foram identificados como potencialmente altos. Recomendamos que\r\n                  você os revise para encontrar oportunidades de economia e evitar desequilíbrios em suas finanças.\r\n                </p>\r\n                <div className=\"planos-content-grid\">\r\n                  <div className=\"chart-wrapper\">\r\n                    {/* Gráfico de Barras para Áreas de Risco */}\r\n                    <Chart\r\n                      chartType=\"BarChart\"\r\n                      width=\"100%\"\r\n                      height=\"100%\"\r\n                      data={prepararDadosParaGrafico(dadosPlano.riscos, \"Valor Detectado\").data}\r\n                      loader={<div>Carregando Gráfico...</div>}\r\n                      options={{\r\n                        title: \"Valores por Categoria de Risco\",\r\n                        legend: { position: \"none\" },\r\n                        bars: \"horizontal\",\r\n                        hAxis: { // Configuração do eixo horizontal\r\n                          format: \"currency\", // Formato de moeda padrão da localização\r\n                          gridlines: { count: 0 }, // Remove as linhas de grade para um visual mais limpo\r\n                          textStyle: { color: '#555', fontName: 'Inter' }, // Estilo do texto\r\n                          minValue: 0, // Garante que o eixo comece em 0\r\n                          formatOptions: { // Opções de formatação específicas para o formato monetário\r\n                            prefix: 'R$',\r\n                            decimalPlaces: 2,\r\n                            groupingSymbol: '.',\r\n                            decimalSymbol: ',',\r\n                          }\r\n                        },\r\n                        vAxis: { // Configuração do eixo vertical\r\n                          textStyle: { fontSize: 12 } // Ajusta o tamanho da fonte do eixo Y\r\n                        },\r\n                        tooltip: { isHtml: true, trigger: 'focus' }, // Tooltip HTML ativado\r\n                        backgroundColor: 'transparent',\r\n                        chartArea: { left: \"15%\", top: \"10%\", width: \"70%\", height: \"70%\" },\r\n                        colors: ['#dc3545'] // Cor das barras (vermelho para risco)\r\n                      }}\r\n                      loaders={chartLoaders} // Aplica opções de loader globais\r\n                    />\r\n                  </div>\r\n                  {/* Lista de detalhes dos riscos */}\r\n                  <div className=\"list-wrapper\">\r\n                    <h3>Detalhes dos Riscos:</h3>\r\n                    <ul>\r\n                      {dadosPlano.riscos.map((item, index) => (\r\n                        <li key={index}>\r\n                          <strong>{categoriaMapeada[item.categoria] || item.categoria}:</strong> {item.subcategoria} - {formatarValor(item.valor)}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Mensagem se não houver ajustes ou riscos */}\r\n            {!dadosPlano?.ajustes?.length && !dadosPlano?.riscos?.length && (\r\n              <div className=\"planos-message no-data-found-message\">\r\n                <p>O plano foi gerado, mas não foram encontrados ajustes ou riscos para o seu perfil financeiro atual. Parece que suas finanças estão em ordem!</p>\r\n              </div>\r\n            )}\r\n\r\n            {/* Exibe a data da última atualização do plano */}\r\n            {dadosPlano.dataAlteracao && (\r\n              <p className=\"data-alteracao\">\r\n                Última atualização do plano: {dadosPlano.dataAlteracao}\r\n              </p>\r\n            )}\r\n\r\n            {/* Navegação entre planos (se houver múltiplos) */}\r\n            {hasMultiplePlans && (\r\n              <div className=\"plan-navigation-pills\">\r\n                <button\r\n                  onClick={handleNextPlan}\r\n                  disabled={currentPlanIndex === 0 || loading} // Desabilita se for o primeiro plano ou estiver carregando\r\n                  className={`nav-pill-button ${currentPlanIndex === 0 ? 'disabled-pill' : ''}`}\r\n                >\r\n                  Anterior\r\n                </button>\r\n                <span className=\"plan-index-display\">\r\n                  Plano {currentPlanIndex + 1} de {todosOsPlanos.length}\r\n                </span>\r\n                <button\r\n                  onClick={handlePreviousPlan}\r\n                  disabled={currentPlanIndex === todosOsPlanos.length - 1 || loading} // Desabilita se for o último plano ou estiver carregando\r\n                  className={`nav-pill-button ${currentPlanIndex === todosOsPlanos.length - 1 ? 'disabled-pill' : ''}`}\r\n                >\r\n                  Proximo\r\n                </button>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {/* Mensagem inicial quando não há planos ou eles estão vazios */}\r\n        {!loading && !error && !dadosPlano && (\r\n          <div className=\"planos-message initial-message\">\r\n            <p>\r\n              Você ainda não possui um plano financeiro salvo ou ele está vazio.\r\n              <br />\r\n              Clique em \"Gerar Novo Plano\" para analisar seus gastos e obter recomendações personalizadas.\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Popup para entrada de valor de economia mensal */}\r\n        <VEcononoPopup\r\n          isOpen={showValueInputPopup}\r\n          onClose={() => setShowValueInputPopup(false)}\r\n          onSubmit={gerarNovoPlanoComValor}\r\n          isLoading={loading}\r\n        />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Planos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}