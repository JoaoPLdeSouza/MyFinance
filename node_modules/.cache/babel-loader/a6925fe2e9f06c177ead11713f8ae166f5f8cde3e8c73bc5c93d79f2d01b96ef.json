{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\Front\\\\myFinance\\\\src\\\\components\\\\EditRendaPopup.js\",\n  _s = $RefreshSig$();\n// src/components/EditRendaPopup.js\nimport React, { useState } from \"react\";\nimport authService from \"../services/authService\";\nimport \"../assets/Popup.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditRendaPopup = ({\n  usuario,\n  onClose\n}) => {\n  _s();\n  const [novaRenda, setNovaRenda] = useState(usuario.renda || 0);\n  const [mensagem, setMensagem] = useState(\"\");\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Ensure 'name' is always a non-null string.\n    // If usuario.nome is null/undefined, it defaults to an empty string.\n    // If your backend requires a *non-empty* name, you might need a placeholder or\n    // to prevent submission if usuario.nome is truly empty/null at this point.\n    const nomeDoUsuario = usuario.nome ? String(usuario.nome) : \"\";\n\n    // IMPORTANT: If your backend *requires* 'name' to be non-empty,\n    // and if 'usuario.nome' is empty/null, you might need to:\n    // 1. Fetch the full user details in ConfigAll.js before opening the popup,\n    // 2. Or, if the API allows updating just `renda` without `name`, check the API docs carefully.\n    // For now, we'll send an empty string if nome is not present.\n    if (!nomeDoUsuario && confirm(\"O nome do usuário não foi carregado. Deseja continuar com um nome vazio? Isso pode causar um erro no servidor se o nome for obrigatório.\")) {\n      // User chose to continue even with empty name\n    } else if (!nomeDoUsuario) {\n      setMensagem(\"Não foi possível obter o nome do usuário. Não é possível atualizar.\");\n      return; // Prevent submission\n    }\n    const dadosParaAtualizar = {\n      name: nomeDoUsuario,\n      renda: novaRenda\n    };\n    console.log(\"Dados a serem enviados para alterarDadosUsuario:\", dadosParaAtualizar); // For debugging\n    console.log(\"Usuario ID para alterarDadosUsuario:\", usuario.id); // For debugging\n\n    authService.alterarDadosUsuario(usuario.id, dadosParaAtualizar).then(() => {\n      setMensagem(\"Rendimento atualizado com sucesso!\");\n      setTimeout(() => {\n        setMensagem(\"\");\n        onClose(); // Close the popup and trigger re-fetch in ConfigAll\n      }, 1500);\n    }).catch(error => {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error(\"Erro ao atualizar rendimento:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Erro ao atualizar rendimento. Verifique os dados e tente novamente.\";\n      setMensagem(errorMessage);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Editar Rendimento\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        value: novaRenda,\n        onChange: e => setNovaRenda(parseFloat(e.target.value)),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Salvar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onClose,\n        children: \"Cancelar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), mensagem && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"popup-message\",\n        children: mensagem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(EditRendaPopup, \"eki+vcMBQ3dEY0Po5xTfg/9ApNs=\");\n_c = EditRendaPopup;\nexport default EditRendaPopup;\nvar _c;\n$RefreshReg$(_c, \"EditRendaPopup\");","map":{"version":3,"names":["React","useState","authService","jsxDEV","_jsxDEV","EditRendaPopup","usuario","onClose","_s","novaRenda","setNovaRenda","renda","mensagem","setMensagem","handleSubmit","e","preventDefault","nomeDoUsuario","nome","String","confirm","dadosParaAtualizar","name","console","log","id","alterarDadosUsuario","then","setTimeout","catch","error","_error$response","_error$response2","_error$response2$data","response","data","message","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","step","value","onChange","parseFloat","target","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/components/EditRendaPopup.js"],"sourcesContent":["// src/components/EditRendaPopup.js\r\nimport React, { useState } from \"react\";\r\nimport authService from \"../services/authService\";\r\nimport \"../assets/Popup.css\";\r\n\r\nconst EditRendaPopup = ({ usuario, onClose }) => {\r\n  const [novaRenda, setNovaRenda] = useState(usuario.renda || 0);\r\n  const [mensagem, setMensagem] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Ensure 'name' is always a non-null string.\r\n    // If usuario.nome is null/undefined, it defaults to an empty string.\r\n    // If your backend requires a *non-empty* name, you might need a placeholder or\r\n    // to prevent submission if usuario.nome is truly empty/null at this point.\r\n    const nomeDoUsuario = usuario.nome ? String(usuario.nome) : \"\";\r\n\r\n    // IMPORTANT: If your backend *requires* 'name' to be non-empty,\r\n    // and if 'usuario.nome' is empty/null, you might need to:\r\n    // 1. Fetch the full user details in ConfigAll.js before opening the popup,\r\n    // 2. Or, if the API allows updating just `renda` without `name`, check the API docs carefully.\r\n    // For now, we'll send an empty string if nome is not present.\r\n    if (!nomeDoUsuario && confirm(\"O nome do usuário não foi carregado. Deseja continuar com um nome vazio? Isso pode causar um erro no servidor se o nome for obrigatório.\")) {\r\n      // User chose to continue even with empty name\r\n    } else if (!nomeDoUsuario) {\r\n      setMensagem(\"Não foi possível obter o nome do usuário. Não é possível atualizar.\");\r\n      return; // Prevent submission\r\n    }\r\n\r\n\r\n    const dadosParaAtualizar = {\r\n      name: nomeDoUsuario,\r\n      renda: novaRenda,\r\n    };\r\n\r\n    console.log(\"Dados a serem enviados para alterarDadosUsuario:\", dadosParaAtualizar); // For debugging\r\n    console.log(\"Usuario ID para alterarDadosUsuario:\", usuario.id); // For debugging\r\n\r\n    authService.alterarDadosUsuario(usuario.id, dadosParaAtualizar)\r\n      .then(() => {\r\n        setMensagem(\"Rendimento atualizado com sucesso!\");\r\n        setTimeout(() => {\r\n          setMensagem(\"\");\r\n          onClose(); // Close the popup and trigger re-fetch in ConfigAll\r\n        }, 1500);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Erro ao atualizar rendimento:\", error.response?.data || error.message);\r\n        const errorMessage = error.response?.data?.message || \"Erro ao atualizar rendimento. Verifique os dados e tente novamente.\";\r\n        setMensagem(errorMessage);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"popup\">\r\n      <h3>Editar Rendimento</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          value={novaRenda}\r\n          onChange={(e) => setNovaRenda(parseFloat(e.target.value))}\r\n          required\r\n        />\r\n        <button type=\"submit\">Salvar</button>\r\n        <button type=\"button\" onClick={onClose}>Cancelar</button>\r\n        {mensagem && <p className=\"popup-message\">{mensagem}</p>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditRendaPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}