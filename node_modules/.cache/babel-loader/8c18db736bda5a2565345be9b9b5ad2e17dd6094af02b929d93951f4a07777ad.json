{"ast":null,"code":"import axios from \"axios\";\n\n// Certifique-se de que esta URL está correta para seu backend\n// É uma boa prática ter isso em uma variável de ambiente ou um arquivo de configuração separado\nconst API_URL = \"http://localhost:9087\";\n\n// Função auxiliar para formatar a data para DD/MM/YYYY\nconst formatDateToDDMMYYYY = date => {\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Mês é base 0\n  const year = date.getFullYear();\n  return `${day}/${month}/${year}`;\n};\nconst login = async ({\n  email,\n  senha\n}) => {\n  try {\n    return await axios.post(`${API_URL}/login`, {\n      email,\n      senha\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 5000\n    });\n  } catch (error) {\n    console.error(\"Erro no login:\", error);\n    throw error;\n  }\n};\nconst register = async usuario => {\n  try {\n    return await axios.post(`${API_URL}/usuario/cadastrar`, usuario);\n  } catch (error) {\n    console.error(\"Erro no registro:\", error);\n    throw error;\n  }\n};\nconst getUserById = async id => {\n  try {\n    return await axios.get(`${API_URL}/usuario/buscar/${id}`);\n  } catch (error) {\n    console.error(\"Erro ao buscar usuário por ID:\", error);\n    throw error;\n  }\n};\nconst alterarSenha = async (id, request) => {\n  try {\n    return await axios.put(`${API_URL}/usuario/alterar/senha?id=${id}`, request);\n  } catch (error) {\n    console.error(\"Erro ao alterar senha:\", error);\n    throw error;\n  }\n};\nconst delet = async id => {\n  try {\n    return await axios.delete(`${API_URL}/usuario_gasto/delete?id=${id}`);\n  } catch (error) {\n    console.error(\"Erro ao deletar usuário_gasto:\", error);\n    throw error;\n  }\n};\nconst alterarDadosUsuario = async (id, dados) => {\n  try {\n    return await axios.put(`${API_URL}/usuario/alterar?id=${id}`, dados);\n  } catch (error) {\n    console.error(\"Erro ao alterar dados do usuário:\", error);\n    throw error;\n  }\n};\nconst alterarEmail = async (id, email, senha) => {\n  try {\n    return await axios.put(`${API_URL}/usuario/alterar/email?id=${id}`, {\n      email,\n      senha\n    });\n  } catch (error) {\n    console.error(\"Erro ao alterar email:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Busca lançamentos por usuário, com filtro opcional por datas.\r\n * Se dataInicio ou dataFinal não forem fornecidas, elas serão padronizadas.\r\n *\r\n * @param {number} idUsuario O ID do usuário.\r\n * @param {object} [filtrosData] Objeto opcional contendo as datas para filtro.\r\n * @param {string} [filtrosData.dataInicio] Data de início para o filtro (formato \"DD/MM/YYYY\").\r\n * @param {string} [filtrosData.dataFinal] Data final para o filtro (formato \"DD/MM/YYYY\").\r\n */\nconst buscarLancamentosPorUsuario = async (idUsuario, filtrosData = {}) => {\n  try {\n    let {\n      dataInicio,\n      dataFinal\n    } = filtrosData;\n\n    // Se dataInicio não for fornecida, defina-a como 01/01 do ano atual\n    if (!dataInicio || dataInicio === \"\") {\n      const today = new Date();\n      dataInicio = formatDateToDDMMYYYY(new Date(today.getFullYear(), 0, 1)); // 01/01 do ano atual\n    }\n\n    // Se dataFinal não for fornecida, defina-a como a data de hoje\n    if (!dataFinal || dataFinal === \"\") {\n      dataFinal = formatDateToDDMMYYYY(new Date()); // Data de hoje\n    }\n    const requestBody = {\n      dataInicio: dataInicio,\n      dataFinal: dataFinal\n    };\n\n    // As imagens da requisição (image_36ee14.png) indicam que idUsuario é um @RequestParam,\n    // então ele deve ir nos `params` (query parameters).\n    const response = await axios.post(`${API_URL}/gasto/buscar/categoria`, requestBody, {\n      params: {\n        idUsuario\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data; // Retorna os dados da resposta\n  } catch (error) {\n    var _error$response;\n    console.error(\"Erro ao buscar lançamentos por usuário:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nconst alterarGasto = async (id, gasto) => {\n  try {\n    return await axios.put(`${API_URL}/gasto/alterar`, gasto, {\n      params: {\n        id\n      }\n    });\n  } catch (error) {\n    console.error(\"Erro ao alterar gasto:\", error);\n    throw error;\n  }\n};\nconst cadastrarGasto = async (idUsuario, dados) => {\n  try {\n    return await axios.post(`${API_URL}/gasto/cadastrar`, dados, {\n      params: {\n        idUsuario\n      }\n    });\n  } catch (error) {\n    console.error(\"Erro ao cadastrar gasto:\", error);\n    throw error;\n  }\n};\nconst deletarGasto = async id => {\n  try {\n    return await axios.delete(`${API_URL}/gasto/deletar`, {\n      params: {\n        id\n      }\n    });\n  } catch (error) {\n    console.error(\"Erro ao deletar gasto:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Gera um novo plano financeiro para o usuário.\r\n * O valor para poupar é opcional e enviado como um parâmetro de query.\r\n * @param {number} idUsuario O ID do usuário.\r\n * @param {number} [valorPraPoupar] O valor opcional que o usuário deseja poupar por mês.\r\n */\nconst gerarPlano = async (idUsuario, valorPraPoupar = null) => {\n  try {\n    let url = `${API_URL}/plano?idUsuario=${idUsuario}`;\n    if (valorPraPoupar !== null && valorPraPoupar !== undefined && !isNaN(parseFloat(valorPraPoupar))) {\n      url += `&valorPraPoupar=${encodeURIComponent(parseFloat(valorPraPoupar))}`;\n    }\n    const response = await axios.post(url, null);\n    return response;\n  } catch (error) {\n    console.error(\"Erro ao gerar plano:\", error);\n    throw error;\n  }\n};\nconst buscarPlanosPorUsuario = async idUsuario => {\n  try {\n    return await axios.get(`${API_URL}/plano/usuario`, {\n      params: {\n        idUsuario\n      }\n    });\n  } catch (error) {\n    console.error(\"Erro ao buscar planos por usuário:\", error);\n    throw error;\n  }\n};\nconst authService = {\n  login,\n  register,\n  getUserById,\n  alterarSenha,\n  delet,\n  alterarDadosUsuario,\n  alterarEmail,\n  buscarLancamentosPorUsuario,\n  alterarGasto,\n  cadastrarGasto,\n  deletarGasto,\n  gerarPlano,\n  buscarPlanosPorUsuario\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","formatDateToDDMMYYYY","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","login","email","senha","post","headers","timeout","error","console","register","usuario","getUserById","id","get","alterarSenha","request","put","delet","delete","alterarDadosUsuario","dados","alterarEmail","buscarLancamentosPorUsuario","idUsuario","filtrosData","dataInicio","dataFinal","today","Date","requestBody","response","params","data","_error$response","message","alterarGasto","gasto","cadastrarGasto","deletarGasto","gerarPlano","valorPraPoupar","url","undefined","isNaN","parseFloat","encodeURIComponent","buscarPlanosPorUsuario","authService"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/services/authService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Certifique-se de que esta URL está correta para seu backend\r\n// É uma boa prática ter isso em uma variável de ambiente ou um arquivo de configuração separado\r\nconst API_URL = \"http://localhost:9087\"; \r\n\r\n// Função auxiliar para formatar a data para DD/MM/YYYY\r\nconst formatDateToDDMMYYYY = (date) => {\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Mês é base 0\r\n  const year = date.getFullYear();\r\n  return `${day}/${month}/${year}`;\r\n};\r\n\r\nconst login = async ({ email, senha }) => {\r\n  try {\r\n    return await axios.post(`${API_URL}/login`, { email, senha }, {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      timeout: 5000 \r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro no login:\", error);\r\n    throw error; \r\n  }\r\n};\r\n\r\nconst register = async (usuario) => {\r\n  try {\r\n    return await axios.post(`${API_URL}/usuario/cadastrar`, usuario);\r\n  } catch (error) {\r\n    console.error(\"Erro no registro:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getUserById = async (id) => {\r\n  try {\r\n    return await axios.get(`${API_URL}/usuario/buscar/${id}`);\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar usuário por ID:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst alterarSenha = async (id, request) => {\r\n  try {\r\n    return await axios.put(`${API_URL}/usuario/alterar/senha?id=${id}`, request);\r\n  } catch (error) {\r\n    console.error(\"Erro ao alterar senha:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst delet = async (id) => {\r\n  try {\r\n    return await axios.delete(`${API_URL}/usuario_gasto/delete?id=${id}`);\r\n  } catch (error) {\r\n    console.error(\"Erro ao deletar usuário_gasto:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst alterarDadosUsuario = async (id, dados) => {\r\n  try {\r\n    return await axios.put(`${API_URL}/usuario/alterar?id=${id}`, dados);\r\n  } catch (error) {\r\n    console.error(\"Erro ao alterar dados do usuário:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst alterarEmail = async (id, email, senha) => {\r\n  try {\r\n    return await axios.put(`${API_URL}/usuario/alterar/email?id=${id}`, { email, senha });\r\n  } catch (error) {\r\n    console.error(\"Erro ao alterar email:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Busca lançamentos por usuário, com filtro opcional por datas.\r\n * Se dataInicio ou dataFinal não forem fornecidas, elas serão padronizadas.\r\n *\r\n * @param {number} idUsuario O ID do usuário.\r\n * @param {object} [filtrosData] Objeto opcional contendo as datas para filtro.\r\n * @param {string} [filtrosData.dataInicio] Data de início para o filtro (formato \"DD/MM/YYYY\").\r\n * @param {string} [filtrosData.dataFinal] Data final para o filtro (formato \"DD/MM/YYYY\").\r\n */\r\nconst buscarLancamentosPorUsuario = async (idUsuario, filtrosData = {}) => {\r\n  try {\r\n    let { dataInicio, dataFinal } = filtrosData;\r\n\r\n    // Se dataInicio não for fornecida, defina-a como 01/01 do ano atual\r\n    if (!dataInicio || dataInicio === \"\") {\r\n      const today = new Date();\r\n      dataInicio = formatDateToDDMMYYYY(new Date(today.getFullYear(), 0, 1)); // 01/01 do ano atual\r\n    }\r\n\r\n    // Se dataFinal não for fornecida, defina-a como a data de hoje\r\n    if (!dataFinal || dataFinal === \"\") {\r\n      dataFinal = formatDateToDDMMYYYY(new Date()); // Data de hoje\r\n    }\r\n\r\n    const requestBody = {\r\n      dataInicio: dataInicio,\r\n      dataFinal: dataFinal\r\n    };\r\n    \r\n    // As imagens da requisição (image_36ee14.png) indicam que idUsuario é um @RequestParam,\r\n    // então ele deve ir nos `params` (query parameters).\r\n    const response = await axios.post(`${API_URL}/gasto/buscar/categoria`, requestBody, {\r\n      params: { idUsuario }, \r\n      headers: { \"Content-Type\": \"application/json\" }\r\n    });\r\n    return response.data; // Retorna os dados da resposta\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar lançamentos por usuário:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst alterarGasto = async (id, gasto) => {\r\n  try {\r\n    return await axios.put(`${API_URL}/gasto/alterar`, gasto, { \r\n      params: { id } \r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro ao alterar gasto:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst cadastrarGasto = async (idUsuario, dados) => {\r\n  try {\r\n    return await axios.post(`${API_URL}/gasto/cadastrar`, dados, {\r\n      params: { idUsuario } \r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro ao cadastrar gasto:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deletarGasto = async (id) => {\r\n  try {\r\n    return await axios.delete(`${API_URL}/gasto/deletar`, {\r\n      params: { id } \r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro ao deletar gasto:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Gera um novo plano financeiro para o usuário.\r\n * O valor para poupar é opcional e enviado como um parâmetro de query.\r\n * @param {number} idUsuario O ID do usuário.\r\n * @param {number} [valorPraPoupar] O valor opcional que o usuário deseja poupar por mês.\r\n */\r\nconst gerarPlano = async (idUsuario, valorPraPoupar = null) => {\r\n  try {\r\n    let url = `${API_URL}/plano?idUsuario=${idUsuario}`;\r\n    if (valorPraPoupar !== null && valorPraPoupar !== undefined && !isNaN(parseFloat(valorPraPoupar))) {\r\n      url += `&valorPraPoupar=${encodeURIComponent(parseFloat(valorPraPoupar))}`;\r\n    }\r\n    const response = await axios.post(url, null); \r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Erro ao gerar plano:\", error);\r\n    throw error; \r\n  }\r\n};\r\n\r\nconst buscarPlanosPorUsuario = async (idUsuario) => {\r\n  try {\r\n    return await axios.get(`${API_URL}/plano/usuario`, {\r\n      params: { idUsuario }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar planos por usuário:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst authService = {\r\n  login,\r\n  register,\r\n  getUserById,\r\n  alterarSenha,\r\n  delet,\r\n  alterarDadosUsuario,\r\n  alterarEmail,\r\n  buscarLancamentosPorUsuario, \r\n  alterarGasto,\r\n  cadastrarGasto,\r\n  deletarGasto,\r\n  gerarPlano,\r\n  buscarPlanosPorUsuario\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}