{"ast":null,"code":"// src/services/authService.js\n\nimport axios from \"axios\";\n\n// ATENÇÃO: Substitua 'SUA_URL_BASE_DA_API' pela URL real do seu backend.\nconst API_URL = \"SUA_URL_BASE_DA_API\";\nconst authService = {\n  // Função de login (exemplo)\n  login: async (email, senha) => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        senha\n      });\n      if (response.data.token) {\n        localStorage.setItem(\"usuario\", JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Erro no login:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  },\n  // Função de registro (exemplo)\n  register: async (nome, email, senha) => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, {\n        nome,\n        email,\n        senha\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Erro no registro:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  },\n  // Função para buscar lançamentos por usuário\n  buscarLancamentosPorUsuario: async (idUsuario, filtros = {}) => {\n    // Garante que dataInicio e dataFinal estejam presentes no body, mesmo que vazios.\n    // Isso atende aos requisitos de {\"dataInicio\": \"\", \"dataFinal\": \"\"},\n    // {\"dataInicio\": \"DD/MM/YYYY\", \"dataFinal\": \"\"}, etc.\n    const body = {\n      dataInicio: filtros.dataInicio || \"\",\n      dataFinal: filtros.dataFinal || \"\"\n    };\n    try {\n      // Com base nas imagens (image_343078.png, image_342d37.png, image_342d16.png, image_36ee14.png), \n      // a API espera um POST com body para os filtros de data.\n      const response = await axios.post(`${API_URL}/gasto/buscarPorUsuario/${idUsuario}`, body); //\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      console.error(\"Erro ao buscar lançamentos:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      throw error;\n    }\n  },\n  // Função para alterar um gasto existente\n  alterarGasto: async (idGasto, dadosGasto) => {\n    try {\n      // O 'dadosGasto' já deve vir com dataHora no formato DD/MM/YYYY do frontend (ex: \"08/06/2025\")\n      const response = await axios.put(`${API_URL}/gasto/alterar/${idGasto}`, dadosGasto);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      console.error(\"Erro ao alterar gasto:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n      throw error;\n    }\n  },\n  // Função para cadastrar um novo gasto\n  cadastrarGasto: async (idUsuario, novoGasto) => {\n    try {\n      // O 'novoGasto' já deve vir com dataHora no formato DD/MM/YYYY\n      const response = await axios.post(`${API_URL}/gasto/cadastrar/${idUsuario}`, novoGasto);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      console.error(\"Erro ao cadastrar gasto:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      throw error;\n    }\n  },\n  // Função para deletar um gasto\n  deletarGasto: async idGasto => {\n    try {\n      const response = await axios.delete(`${API_URL}/gasto/deletar/${idGasto}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      console.error(\"Erro ao deletar gasto:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n      throw error;\n    }\n  },\n  // Função para fazer logout\n  logout: () => {\n    localStorage.removeItem(\"usuario\");\n  },\n  // Função para obter o usuário logado\n  getCurrentUser: () => {\n    return JSON.parse(localStorage.getItem(\"usuario\"));\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","authService","login","email","senha","response","post","data","token","localStorage","setItem","JSON","stringify","error","_error$response","console","message","register","nome","_error$response2","buscarLancamentosPorUsuario","idUsuario","filtros","body","dataInicio","dataFinal","_error$response3","alterarGasto","idGasto","dadosGasto","put","_error$response4","cadastrarGasto","novoGasto","_error$response5","deletarGasto","delete","_error$response6","logout","removeItem","getCurrentUser","parse","getItem"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\n\r\nimport axios from \"axios\";\r\n\r\n// ATENÇÃO: Substitua 'SUA_URL_BASE_DA_API' pela URL real do seu backend.\r\nconst API_URL = \"SUA_URL_BASE_DA_API\"; \r\n\r\nconst authService = {\r\n  // Função de login (exemplo)\r\n  login: async (email, senha) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/login`, { email, senha });\r\n      if (response.data.token) {\r\n        localStorage.setItem(\"usuario\", JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erro no login:\", error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Função de registro (exemplo)\r\n  register: async (nome, email, senha) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/register`, { nome, email, senha });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erro no registro:\", error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Função para buscar lançamentos por usuário\r\n  buscarLancamentosPorUsuario: async (idUsuario, filtros = {}) => {\r\n    // Garante que dataInicio e dataFinal estejam presentes no body, mesmo que vazios.\r\n    // Isso atende aos requisitos de {\"dataInicio\": \"\", \"dataFinal\": \"\"},\r\n    // {\"dataInicio\": \"DD/MM/YYYY\", \"dataFinal\": \"\"}, etc.\r\n    const body = {\r\n      dataInicio: filtros.dataInicio || \"\", \r\n      dataFinal: filtros.dataFinal || \"\"    \r\n    };\r\n    \r\n    try {\r\n      // Com base nas imagens (image_343078.png, image_342d37.png, image_342d16.png, image_36ee14.png), \r\n      // a API espera um POST com body para os filtros de data.\r\n      const response = await axios.post(`${API_URL}/gasto/buscarPorUsuario/${idUsuario}`, body); //\r\n      return response.data; \r\n    } catch (error) {\r\n      console.error(\"Erro ao buscar lançamentos:\", error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Função para alterar um gasto existente\r\n  alterarGasto: async (idGasto, dadosGasto) => {\r\n    try {\r\n      // O 'dadosGasto' já deve vir com dataHora no formato DD/MM/YYYY do frontend (ex: \"08/06/2025\")\r\n      const response = await axios.put(`${API_URL}/gasto/alterar/${idGasto}`, dadosGasto);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erro ao alterar gasto:\", error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Função para cadastrar um novo gasto\r\n  cadastrarGasto: async (idUsuario, novoGasto) => {\r\n    try {\r\n      // O 'novoGasto' já deve vir com dataHora no formato DD/MM/YYYY\r\n      const response = await axios.post(`${API_URL}/gasto/cadastrar/${idUsuario}`, novoGasto);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erro ao cadastrar gasto:\", error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Função para deletar um gasto\r\n  deletarGasto: async (idGasto) => {\r\n    try {\r\n      const response = await axios.delete(`${API_URL}/gasto/deletar/${idGasto}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erro ao deletar gasto:\", error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Função para fazer logout\r\n  logout: () => {\r\n    localStorage.removeItem(\"usuario\");\r\n  },\r\n\r\n  // Função para obter o usuário logado\r\n  getCurrentUser: () => {\r\n    return JSON.parse(localStorage.getItem(\"usuario\"));\r\n  },\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}