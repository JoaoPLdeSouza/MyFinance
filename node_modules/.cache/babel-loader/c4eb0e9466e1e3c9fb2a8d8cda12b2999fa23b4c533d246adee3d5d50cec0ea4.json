{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpls2\\\\TCC\\\\Front\\\\myFinance\\\\src\\\\components\\\\EditRendaPopup.js\",\n  _s = $RefreshSig$();\n// src/components/EditRendaPopup.js\nimport React, { useState, useEffect } from \"react\";\nimport authService from \"../services/authService\";\nimport \"../assets/Popup.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditRendaPopup = ({\n  usuario,\n  onClose\n}) => {\n  _s();\n  const [novaRenda, setNovaRenda] = useState(usuario.renda || 0);\n  const [mensagem, setMensagem] = useState(\"\");\n  useEffect(() => {\n    // Log the user prop when the component mounts or updates, for debugging\n    console.log(\"EditRendaPopup - Prop 'usuario' recebida:\", usuario);\n    if (usuario && !usuario.nome) {\n      console.warn(\"EditRendaPopup - 'usuario.nome' está ausente ou é nulo/vazio na prop:\", usuario.nome);\n    }\n  }, [usuario]);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Ensure 'nomeDoUsuario' is always a non-null, non-empty string.\n    // Use String() constructor to forcefully convert to string, then trim.\n    const nomeDoUsuario = usuario !== null && usuario !== void 0 && usuario.nome ? String(usuario.nome).trim() : \"\";\n\n    // This check is a safeguard: if for some reason 'usuario.nome' is empty, prevent sending a bad request.\n    if (!nomeDoUsuario) {\n      setMensagem(\"Erro: O nome do usuário não está disponível no sistema. Não é possível atualizar o rendimento.\");\n      console.error(\"Tentativa de enviar renda com nome vazio. Objeto usuario:\", usuario);\n      return;\n    }\n    const dadosParaAtualizar = {\n      name: nomeDoUsuario,\n      // Send the automatically filled name\n      renda: novaRenda\n    };\n    console.log(\"EditRendaPopup - Dados a serem enviados (payload):\", dadosParaAtualizar);\n    console.log(\"EditRendaPopup - Usuario ID para requisição:\", usuario.id);\n    authService.alterarDadosUsuario(usuario.id, dadosParaAtualizar).then(() => {\n      setMensagem(\"Rendimento atualizado com sucesso!\");\n      setTimeout(() => {\n        setMensagem(\"\");\n        onClose();\n      }, 1500);\n    }).catch(error => {\n      console.error(\"Erro ao atualizar rendimento (detalhes completos):\", error.response || error.message);\n      let errorMessage = \"Erro ao atualizar rendimento. Tente novamente.\";\n      if (error.response && error.response.data) {\n        const backendData = error.response.data;\n        if (backendData.message) {\n          if (Array.isArray(backendData.message)) {\n            // *** THIS IS THE KEY CHANGE ***\n            // Join all messages from the array for a more detailed error display\n            errorMessage = backendData.message.join(\" | \"); // Use a separator like \" | \" for clarity\n          } else if (typeof backendData.message === 'string') {\n            errorMessage = backendData.message;\n          }\n        } else if (backendData.error) {\n          // Check for a general 'error' field if 'message' isn't present\n          errorMessage = backendData.error;\n        }\n      }\n\n      // Apply a more user-friendly message for common name errors, otherwise show the raw backend message\n      if (errorMessage.includes(\"Nome\") && (errorMessage.includes(\"vazio\") || errorMessage.includes(\"nulo\") || errorMessage.includes(\"preenchido incorretamente\"))) {\n        setMensagem(`Erro no nome: ${errorMessage}. Verifique o nome em seu perfil ou contate o suporte.`);\n      } else {\n        setMensagem(errorMessage); // Show the more detailed message from backend\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Editar Rendimento\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        value: novaRenda,\n        onChange: e => setNovaRenda(parseFloat(e.target.value)),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Salvar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onClose,\n        children: \"Cancelar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), mensagem && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"popup-message\",\n        children: mensagem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(EditRendaPopup, \"UdyOu8cenpSZh2lfw7QlYnswJfA=\");\n_c = EditRendaPopup;\nexport default EditRendaPopup;\nvar _c;\n$RefreshReg$(_c, \"EditRendaPopup\");","map":{"version":3,"names":["React","useState","useEffect","authService","jsxDEV","_jsxDEV","EditRendaPopup","usuario","onClose","_s","novaRenda","setNovaRenda","renda","mensagem","setMensagem","console","log","nome","warn","handleSubmit","e","preventDefault","nomeDoUsuario","String","trim","error","dadosParaAtualizar","name","id","alterarDadosUsuario","then","setTimeout","catch","response","message","errorMessage","data","backendData","Array","isArray","join","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","step","value","onChange","parseFloat","target","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jpls2/TCC/Front/myFinance/src/components/EditRendaPopup.js"],"sourcesContent":["// src/components/EditRendaPopup.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport authService from \"../services/authService\";\r\nimport \"../assets/Popup.css\";\r\n\r\nconst EditRendaPopup = ({ usuario, onClose }) => {\r\n  const [novaRenda, setNovaRenda] = useState(usuario.renda || 0);\r\n  const [mensagem, setMensagem] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Log the user prop when the component mounts or updates, for debugging\r\n    console.log(\"EditRendaPopup - Prop 'usuario' recebida:\", usuario);\r\n    if (usuario && !usuario.nome) {\r\n      console.warn(\"EditRendaPopup - 'usuario.nome' está ausente ou é nulo/vazio na prop:\", usuario.nome);\r\n    }\r\n  }, [usuario]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Ensure 'nomeDoUsuario' is always a non-null, non-empty string.\r\n    // Use String() constructor to forcefully convert to string, then trim.\r\n    const nomeDoUsuario = usuario?.nome ? String(usuario.nome).trim() : \"\";\r\n\r\n    // This check is a safeguard: if for some reason 'usuario.nome' is empty, prevent sending a bad request.\r\n    if (!nomeDoUsuario) {\r\n      setMensagem(\"Erro: O nome do usuário não está disponível no sistema. Não é possível atualizar o rendimento.\");\r\n      console.error(\"Tentativa de enviar renda com nome vazio. Objeto usuario:\", usuario);\r\n      return;\r\n    }\r\n\r\n    const dadosParaAtualizar = {\r\n      name: nomeDoUsuario, // Send the automatically filled name\r\n      renda: novaRenda,\r\n    };\r\n\r\n    console.log(\"EditRendaPopup - Dados a serem enviados (payload):\", dadosParaAtualizar);\r\n    console.log(\"EditRendaPopup - Usuario ID para requisição:\", usuario.id);\r\n\r\n    authService.alterarDadosUsuario(usuario.id, dadosParaAtualizar)\r\n      .then(() => {\r\n        setMensagem(\"Rendimento atualizado com sucesso!\");\r\n        setTimeout(() => {\r\n          setMensagem(\"\");\r\n          onClose();\r\n        }, 1500);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Erro ao atualizar rendimento (detalhes completos):\", error.response || error.message);\r\n\r\n        let errorMessage = \"Erro ao atualizar rendimento. Tente novamente.\";\r\n        if (error.response && error.response.data) {\r\n          const backendData = error.response.data;\r\n          if (backendData.message) {\r\n            if (Array.isArray(backendData.message)) {\r\n              // *** THIS IS THE KEY CHANGE ***\r\n              // Join all messages from the array for a more detailed error display\r\n              errorMessage = backendData.message.join(\" | \"); // Use a separator like \" | \" for clarity\r\n            } else if (typeof backendData.message === 'string') {\r\n              errorMessage = backendData.message;\r\n            }\r\n          } else if (backendData.error) { // Check for a general 'error' field if 'message' isn't present\r\n              errorMessage = backendData.error;\r\n          }\r\n        }\r\n\r\n        // Apply a more user-friendly message for common name errors, otherwise show the raw backend message\r\n        if (errorMessage.includes(\"Nome\") &&\r\n            (errorMessage.includes(\"vazio\") || errorMessage.includes(\"nulo\") || errorMessage.includes(\"preenchido incorretamente\"))) {\r\n            setMensagem(`Erro no nome: ${errorMessage}. Verifique o nome em seu perfil ou contate o suporte.`);\r\n        } else {\r\n            setMensagem(errorMessage); // Show the more detailed message from backend\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"popup\">\r\n      <h3>Editar Rendimento</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          value={novaRenda}\r\n          onChange={(e) => setNovaRenda(parseFloat(e.target.value))}\r\n          required\r\n        />\r\n        <button type=\"submit\">Salvar</button>\r\n        <button type=\"button\" onClick={onClose}>Cancelar</button>\r\n        {mensagem && <p className=\"popup-message\">{mensagem}</p>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditRendaPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}